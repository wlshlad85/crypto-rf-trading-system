{
  "trading_pattern_analyzer.py": {
    "path": "trading_pattern_analyzer.py",
    "name": "trading_pattern_analyzer",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "re",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "matplotlib.pyplot",
      "seaborn",
      "os",
      "json",
      "traceback"
    ],
    "classes": [
      "TradingPatternAnalyzer"
    ],
    "functions": [
      "main",
      "__init__",
      "parse_trading_data",
      "identify_trading_cycles",
      "analyze_profitable_patterns",
      "_find_optimal_ranges",
      "_analyze_price_momentum",
      "_analyze_position_sizing",
      "_analyze_timing_patterns",
      "extract_ml_features",
      "generate_pattern_report",
      "save_analysis"
    ],
    "docstring": "Trading Pattern Analyzer - Extract Successful Patterns from Live Trading Data\n\nAnalyzes the 78-trade BTC session to identify high-profit patterns for Random Forest enhancement.\nExtracts momentum indicators, position sizing rules, and exit timing signals.\n\nUsage: python3 trading_pattern_analyzer.py",
    "last_modified": 1752494313.8755753,
    "lines_of_code": 485,
    "trading_relevance": 1.0
  },
  "setup.py": {
    "path": "setup.py",
    "name": "setup",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "setuptools.setup",
      "setuptools.find_packages"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Setup script for Crypto Random Forest Trading System.",
    "last_modified": 1751697437.2957141,
    "lines_of_code": 41,
    "trading_relevance": 0.06214689265536724
  },
  "production_deployment_layer.py": {
    "path": "production_deployment_layer.py",
    "name": "production_deployment_layer",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "ccxt",
      "time",
      "json",
      "fcntl",
      "threading",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "typing.Callable",
      "pandas",
      "numpy",
      "warnings",
      "os",
      "shutil",
      "os"
    ],
    "classes": [
      "CircuitBreaker",
      "RateLimiter",
      "FileManager",
      "LogRotator",
      "ProductionExchangeManager",
      "ProductionTrader"
    ],
    "functions": [
      "main",
      "__init__",
      "call",
      "_on_success",
      "_on_failure",
      "__init__",
      "acquire",
      "safe_read",
      "safe_write",
      "safe_json_read",
      "safe_json_write",
      "__init__",
      "should_rotate",
      "rotate_log",
      "__init__",
      "_initialize_exchange",
      "_enforce_rate_limit",
      "fetch_ticker",
      "fetch_ohlcv",
      "place_order",
      "__init__",
      "_load_state",
      "_save_state",
      "_log_message",
      "_update_coms",
      "fetch_market_data",
      "execute_trading_logic",
      "execute_trade",
      "run_trading_cycle"
    ],
    "docstring": "Production Deployment Layer with CCXT/Alpaca Integration\n\nImplements robust API handling, retry mechanisms, file locking, and\nproduction-ready execution for the enhanced Random Forest trading system.\n\nFeatures:\n- Multi-exchange support via CCXT\n- Comprehensive retry/failure handling\n- File locking for concurrent access\n- Rate limiting and API quota management\n- Circuit breaker patterns\n- Performance monitoring\n\nUsage: from production_deployment_layer import ProductionTrader",
    "last_modified": 1752496721.6570075,
    "lines_of_code": 615,
    "trading_relevance": 1.0
  },
  "advanced_hyperparameter_optimization.py": {
    "path": "advanced_hyperparameter_optimization.py",
    "name": "advanced_hyperparameter_optimization",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "optuna",
      "sklearn.metrics.r2_score",
      "sklearn.model_selection.TimeSeriesSplit",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog"
    ],
    "classes": [
      "AdvancedHyperparameterOptimizer"
    ],
    "functions": [
      "main",
      "__init__",
      "run_advanced_optimization",
      "_prepare_optimization_data",
      "_optimize_model_hyperparameters",
      "_optimize_trading_parameters",
      "_run_multi_objective_optimization",
      "_validate_best_parameters",
      "_generate_optimization_report",
      "objective",
      "trading_objective",
      "multi_objective"
    ],
    "docstring": "Advanced hyperparameter optimization for improved trading performance.",
    "last_modified": 1751878653.262552,
    "lines_of_code": 787,
    "trading_relevance": 1.0
  },
  "paper_trading.py": {
    "path": "paper_trading.py",
    "name": "paper_trading",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog"
    ],
    "classes": [
      "CryptoPaperTrader"
    ],
    "functions": [
      "__init__",
      "_load_optimized_params",
      "_make_trading_prediction",
      "_convert_prediction_to_signal",
      "_update_portfolio_values",
      "_print_daily_summary",
      "_generate_trading_report",
      "_calculate_max_drawdown",
      "_create_trading_visualization"
    ],
    "docstring": "Paper trading implementation using optimized Random Forest parameters.",
    "last_modified": 1751826990.510235,
    "lines_of_code": 484,
    "trading_relevance": 1.0
  },
  "fast_optimization.py": {
    "path": "fast_optimization.py",
    "name": "fast_optimization",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "optuna",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.metrics.r2_score"
    ],
    "classes": [
      "FastCryptoOptimizer"
    ],
    "functions": [
      "__init__",
      "_generate_optimization_report",
      "objective"
    ],
    "docstring": "Fast optimization suite for Crypto Random Forest Trading System.",
    "last_modified": 1751822579.1398506,
    "lines_of_code": 601,
    "trading_relevance": 1.0
  },
  "btc_quick_demo.py": {
    "path": "btc_quick_demo.py",
    "name": "btc_quick_demo",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "json",
      "warnings"
    ],
    "classes": [
      "BTCQuickDemo"
    ],
    "functions": [
      "main",
      "__init__",
      "fetch_btc_data",
      "calculate_signals",
      "execute_trade",
      "apply_risk_management",
      "get_total_value",
      "record_portfolio_snapshot",
      "print_status",
      "run_demo",
      "generate_final_report"
    ],
    "docstring": "Quick BTC Paper Trading Demo - 30 minutes with real-time updates\n\nThis demonstrates the full paper trading system in a condensed timeframe:\n- Real BTC price fetching every 30 seconds\n- Advanced technical analysis and signal generation\n- Live portfolio tracking and trade execution\n- Risk management and performance analysis\n\nUsage: python3 btc_quick_demo.py",
    "last_modified": 1752409941.1056986,
    "lines_of_code": 431,
    "trading_relevance": 1.0
  },
  "intensive_training.py": {
    "path": "intensive_training.py",
    "name": "intensive_training",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "gc",
      "sklearn.model_selection.KFold",
      "sklearn.model_selection.cross_val_score",
      "sklearn.metrics.r2_score",
      "sklearn.metrics.mean_squared_error",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog"
    ],
    "classes": [
      "IntensiveTrainer"
    ],
    "functions": [
      "__init__",
      "_load_optimized_params",
      "_generate_training_report"
    ],
    "docstring": "Intensive training with 150 iterations for Cryptocurrency Random Forest models.",
    "last_modified": 1751870204.0111744,
    "lines_of_code": 576,
    "trading_relevance": 1.0
  },
  "monitor_enhanced_trading.py": {
    "path": "monitor_enhanced_trading.py",
    "name": "monitor_enhanced_trading",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "os",
      "time",
      "datetime.datetime"
    ],
    "classes": [],
    "functions": [
      "monitor_enhanced_session"
    ],
    "docstring": "Enhanced Trading Session Monitor\n\nMonitor the enhanced Random Forest paper trading session in real-time.",
    "last_modified": 1752495784.0742917,
    "lines_of_code": 59,
    "trading_relevance": 0.05649717514124294
  },
  "btc_24hr_paper_trader.py": {
    "path": "btc_24hr_paper_trader.py",
    "name": "btc_24hr_paper_trader",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "json",
      "os",
      "warnings"
    ],
    "classes": [
      "BTC24HourTrader"
    ],
    "functions": [
      "main",
      "__init__",
      "log_message",
      "fetch_btc_data",
      "calculate_technical_indicators",
      "generate_trading_signal",
      "apply_risk_management",
      "execute_trade",
      "get_total_value",
      "record_portfolio_snapshot",
      "print_status",
      "save_session_data",
      "run_24_hour_session",
      "generate_final_report"
    ],
    "docstring": "24-Hour BTC-USD Paper Trading Session\n\nThis runs a continuous 24-hour paper trading session for Bitcoin with:\n- Real-time minute data fetching\n- Advanced trading strategies\n- Risk management\n- Continuous monitoring and logging\n- Performance tracking\n\nUsage: python3 btc_24hr_paper_trader.py",
    "last_modified": 1752389474.917354,
    "lines_of_code": 542,
    "trading_relevance": 1.0
  },
  "run_12month_backtest.py": {
    "path": "run_12month_backtest.py",
    "name": "run_12month_backtest",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "yfinance",
      "datetime.datetime",
      "datetime.timedelta",
      "joblib",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.preprocessing.StandardScaler",
      "warnings",
      "traceback"
    ],
    "classes": [],
    "functions": [
      "calculate_rsi",
      "run_backtest"
    ],
    "docstring": "12-Month Backtest with Current Trading Strategy",
    "last_modified": 1752505971.7592263,
    "lines_of_code": 224,
    "trading_relevance": 1.0
  },
  "enhanced_live_monitor.py": {
    "path": "enhanced_live_monitor.py",
    "name": "enhanced_live_monitor",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "re",
      "time",
      "json",
      "asyncio",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "subprocess",
      "rich.console.Console",
      "rich.layout.Layout",
      "rich.panel.Panel",
      "rich.table.Table",
      "rich.text.Text",
      "rich.live.Live",
      "rich.progress.Progress",
      "rich.progress.BarColumn",
      "rich.progress.TextColumn",
      "rich.align.Align",
      "rich.box"
    ],
    "classes": [
      "TradingDataParser",
      "TradingSessionState",
      "EnhancedTradingMonitor"
    ],
    "functions": [
      "find_latest_log",
      "__init__",
      "parse_trade",
      "parse_portfolio_status",
      "__init__",
      "update_from_log",
      "get_current_metrics",
      "__init__",
      "create_layout",
      "create_header_panel",
      "create_trades_panel",
      "create_portfolio_panel",
      "create_metrics_panel",
      "create_status_panel",
      "create_footer_panel",
      "update_display"
    ],
    "docstring": "Enhanced Real-Time BTC Trading Monitor\n\nProvides comprehensive live monitoring of the 24-hour trading session with:\n- Real-time trade parsing and display\n- Live portfolio tracking with P&L\n- Performance metrics dashboard\n- Auto-refreshing rich terminal UI\n- Strategy analysis and trade breakdown\n\nUsage: python3 enhanced_live_monitor.py",
    "last_modified": 1752421567.3072002,
    "lines_of_code": 562,
    "trading_relevance": 1.0
  },
  "monitor_24hr_trading.py": {
    "path": "monitor_24hr_trading.py",
    "name": "monitor_24hr_trading",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "json",
      "time",
      "datetime.datetime",
      "datetime.timedelta",
      "subprocess"
    ],
    "classes": [],
    "functions": [
      "get_trading_process_status",
      "read_latest_log",
      "find_latest_session_data",
      "parse_log_for_status",
      "print_session_status",
      "main"
    ],
    "docstring": "24-Hour BTC Trading Session Monitor\n\nThis script monitors the ongoing 24-hour trading session and provides status updates.",
    "last_modified": 1752412009.8185246,
    "lines_of_code": 219,
    "trading_relevance": 1.0
  },
  "comprehensive_backtest.py": {
    "path": "comprehensive_backtest.py",
    "name": "comprehensive_backtest",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog"
    ],
    "classes": [
      "ComprehensiveBacktester"
    ],
    "functions": [
      "__init__",
      "_load_optimized_params",
      "_calculate_performance_metrics",
      "_generate_backtest_report"
    ],
    "docstring": "Comprehensive backtesting for Cryptocurrency Random Forest Trading System.",
    "last_modified": 1751830256.6978784,
    "lines_of_code": 753,
    "trading_relevance": 1.0
  },
  "agent01_controller.py": {
    "path": "agent01_controller.py",
    "name": "agent01_controller",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "os",
      "json",
      "signal",
      "subprocess",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional"
    ],
    "classes": [
      "Agent01Controller"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "start_agent02",
      "start_agent03",
      "check_agent_health",
      "restart_failed_agents",
      "analyze_session_performance",
      "suggest_parameter_tweaks",
      "coordinate_meta_optimization",
      "_signal_parameter_update",
      "_monitor_optimization_progress",
      "run_coordination_cycle",
      "_signal_handler",
      "main"
    ],
    "docstring": "Agent01: Project Manager & Meta-Optimizer Controller\n\nCoordinates development, oversees backtests and parameter tuning,\nmanages meta-optimization lifecycle for the crypto trading system.",
    "last_modified": 1752498226.5569205,
    "lines_of_code": 369,
    "trading_relevance": 1.0
  },
  "test_meta_optimizer.py": {
    "path": "test_meta_optimizer.py",
    "name": "test_meta_optimizer",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "sys",
      "os",
      "traceback",
      "meta_optim.objective_fn.MetaObjectiveFunction",
      "meta_optim.retrain_worker.RetrainWorker",
      "meta_optim.hyperband_runner.HyperbandRunner",
      "meta_optim.deployment_cycle.MetaDeploymentCycle"
    ],
    "classes": [],
    "functions": [
      "test_objective_function",
      "test_retrain_worker",
      "test_hyperband_runner",
      "test_deployment_cycle",
      "main"
    ],
    "docstring": "Test Meta-Optimizer Layer Components\n\nQuick verification that all meta-optimizer components are working correctly.",
    "last_modified": 1752497519.5417426,
    "lines_of_code": 167,
    "trading_relevance": 0.9067796610169492
  },
  "debug_optimization.py": {
    "path": "debug_optimization.py",
    "name": "debug_optimization",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "logging",
      "sys",
      "traceback",
      "pathlib.Path",
      "datetime.datetime",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel"
    ],
    "classes": [
      "DebugOptimizer"
    ],
    "functions": [
      "main",
      "__init__",
      "run_debug_optimization",
      "_debug_data_preparation",
      "_debug_target_preparation",
      "_debug_model_training",
      "_debug_optimization_trial",
      "_test_objective_function",
      "_analyze_data_quality"
    ],
    "docstring": "Debug optimization with comprehensive logging to identify issues.",
    "last_modified": 1751878488.0279088,
    "lines_of_code": 452,
    "trading_relevance": 1.0
  },
  "test_simple.py": {
    "path": "test_simple.py",
    "name": "test_simple",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "utils.config.get_default_config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Simple test script to verify crypto RF trading system functionality.",
    "last_modified": 1751712905.6135142,
    "lines_of_code": 107,
    "trading_relevance": 1.0
  },
  "agent02_data_ml.py": {
    "path": "agent02_data_ml.py",
    "name": "agent02_data_ml",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "os",
      "json",
      "signal",
      "numpy",
      "pandas",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.model_selection.train_test_split",
      "joblib",
      "warnings",
      "deap.base",
      "deap.creator",
      "deap.tools",
      "deap.algorithms"
    ],
    "classes": [
      "Agent02DataML"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "load_training_data",
      "_create_synthetic_data",
      "_prepare_enhanced_features",
      "_add_technical_indicators",
      "_add_market_structure_features",
      "train_random_forest_models",
      "_train_entry_model",
      "_train_position_model",
      "_train_exit_model",
      "_train_profit_model",
      "_save_models",
      "run_genetic_algorithm_optimization",
      "_run_deap_optimization",
      "_run_heuristic_optimization",
      "_evaluate_individual",
      "_evaluate_parameters",
      "check_for_optimization_signals",
      "_update_parameters",
      "_send_optimization_response",
      "run_main_loop",
      "_signal_handler"
    ],
    "docstring": "Agent02: Data Loader, Feature Engineer & Random Forest Retrainer\n\nHandles data loading, feature engineering, Random Forest retraining,\nand genetic algorithm meta-optimizer (uses DEAP if available, else heuristics).",
    "last_modified": 1752498376.3087497,
    "lines_of_code": 875,
    "trading_relevance": 1.0
  },
  "ultra_main.py": {
    "path": "ultra_main.py",
    "name": "ultra_main",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "argparse",
      "logging",
      "sys",
      "time",
      "warnings",
      "pathlib.Path",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "pandas",
      "numpy",
      "sklearn",
      "utils.config.load_config",
      "utils.config.DataConfig",
      "utils.config.FeatureConfig",
      "utils.config.ModelConfig",
      "data.multi_timeframe_fetcher.UltraMultiTimeframeFetcher",
      "features.ultra_feature_engineering.UltraCryptoFeatureEngine",
      "models.ultra_target_engineering.UltraTargetEngineer",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "sklearn.metrics.mean_squared_error",
      "sklearn.metrics.mean_absolute_error",
      "sklearn.metrics.r2_score",
      "json",
      "data.yfinance_fetcher.YFinanceDataFetcher",
      "features.technical_indicators.TechnicalIndicators",
      "optuna",
      "optuna.samplers.TPESampler",
      "optuna.pruners.MedianPruner",
      "sklearn.model_selection.cross_val_score"
    ],
    "classes": [
      "UltraOptimizedTradingSystem"
    ],
    "functions": [
      "main",
      "__init__",
      "setup_logging",
      "initialize_components",
      "fetch_ultra_data",
      "engineer_ultra_features",
      "create_ultra_targets",
      "prepare_training_data",
      "ultra_hyperparameter_optimization",
      "train_ultra_model",
      "ultra_walk_forward_validation",
      "_purged_walk_forward_validation",
      "run_ultra_backtest",
      "run_full_pipeline",
      "_save_results",
      "objective"
    ],
    "docstring": "Ultra-optimized cryptocurrency prediction system with advanced ML techniques.\nCombines multi-timeframe analysis, ultra-feature engineering, and risk-adjusted targets.",
    "last_modified": 1752020563.4771757,
    "lines_of_code": 612,
    "trading_relevance": 1.0
  },
  "quick_demo_crypto.py": {
    "path": "quick_demo_crypto.py",
    "name": "quick_demo_crypto",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "time",
      "datetime.datetime",
      "pathlib.Path",
      "sys",
      "main.CryptoRFTradingSystem",
      "main.setup_logging",
      "traceback"
    ],
    "classes": [],
    "functions": [
      "print_progress",
      "main"
    ],
    "docstring": "Quick Demo Script for Crypto Random Forest Trading System\n\nThis script demonstrates the full functionality of the crypto RF trading system\nusing a reduced dataset for fast execution (3-5 minutes instead of 30+ minutes).\n\nFeatures:\n- Limited to top 3 cryptocurrencies (BTC, ETH, SOL)\n- 30 days of data instead of 2 years\n- Reduced feature complexity\n- Progress indicators\n- Faster model training",
    "last_modified": 1751997915.8618066,
    "lines_of_code": 198,
    "trading_relevance": 1.0
  },
  "optimization_suite.py": {
    "path": "optimization_suite.py",
    "name": "optimization_suite",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "optuna",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog",
      "sklearn.metrics.r2_score",
      "sklearn.ensemble.RandomForestRegressor"
    ],
    "classes": [
      "CryptoOptimizer"
    ],
    "functions": [
      "__init__",
      "_generate_optimization_report",
      "objective"
    ],
    "docstring": "Comprehensive optimization suite for Crypto Random Forest Trading System.",
    "last_modified": 1751815789.9073176,
    "lines_of_code": 595,
    "trading_relevance": 1.0
  },
  "simplified_rf_trainer.py": {
    "path": "simplified_rf_trainer.py",
    "name": "simplified_rf_trainer",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "datetime.datetime",
      "os",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.model_selection.train_test_split",
      "sklearn.model_selection.cross_val_score",
      "sklearn.metrics.classification_report",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.precision_score",
      "sklearn.metrics.recall_score",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.preprocessing.LabelEncoder",
      "joblib",
      "warnings",
      "traceback"
    ],
    "classes": [
      "SimplifiedRFTrainer"
    ],
    "functions": [
      "main",
      "__init__",
      "load_and_prepare_data",
      "_add_pattern_features",
      "prepare_training_datasets",
      "train_models",
      "predict_trading_signals",
      "get_feature_importance",
      "save_models"
    ],
    "docstring": "Simplified Enhanced Random Forest Trainer\n\nTrains Random Forest models using available features from the 4-hour dataset\nto achieve higher profit percentages than the 2.82% baseline.\n\nUsage: python3 simplified_rf_trainer.py",
    "last_modified": 1752494713.8418424,
    "lines_of_code": 441,
    "trading_relevance": 1.0
  },
  "enhanced_momentum_features.py": {
    "path": "enhanced_momentum_features.py",
    "name": "enhanced_momentum_features",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "warnings",
      "talib"
    ],
    "classes": [
      "MomentumFeatureEngineer"
    ],
    "functions": [
      "main",
      "__init__",
      "_get_default_patterns",
      "create_enhanced_features",
      "_add_price_momentum_features",
      "_add_volume_momentum_features",
      "_add_pattern_recognition_features",
      "_add_market_structure_features",
      "_add_volatility_regime_features",
      "_add_time_momentum_features",
      "_add_position_optimization_features",
      "_add_success_probability_features",
      "create_target_variables",
      "get_feature_importance_groups"
    ],
    "docstring": "Enhanced Momentum Feature Engineering for Random Forest\n\nCreates sophisticated momentum and pattern recognition features based on\nsuccessful trading patterns: 1.780%/hour threshold, 0.6-1.2h cycles, optimal position sizing.\n\nUsage: from enhanced_momentum_features import MomentumFeatureEngineer",
    "last_modified": 1752494608.2961795,
    "lines_of_code": 442,
    "trading_relevance": 1.0
  },
  "run_optimized_hyperparameters.py": {
    "path": "run_optimized_hyperparameters.py",
    "name": "run_optimized_hyperparameters",
    "type": "trading",
    "priority": "MEDIUM",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "advanced_hyperparameter_optimization.AdvancedHyperparameterOptimizer",
      "traceback"
    ],
    "classes": [],
    "functions": [
      "run_optimized_hyperparameters",
      "main"
    ],
    "docstring": "Run the fixed hyperparameter optimization with production settings.",
    "last_modified": 1751878861.047175,
    "lines_of_code": 118,
    "trading_relevance": 0.597457627118644
  },
  "run_minute_backtest.py": {
    "path": "run_minute_backtest.py",
    "name": "run_minute_backtest",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "argparse",
      "logging",
      "json",
      "time",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "warnings",
      "pandas",
      "numpy",
      "data.minute_data_manager.MinuteDataManager",
      "features.minute_feature_engineering.MinuteFeatureEngine",
      "models.minute_random_forest_model.MinuteRandomForestModel",
      "models.minute_random_forest_model.EnsembleMinuteRandomForest",
      "strategies.minute_trading_strategies.MinuteStrategyEnsemble",
      "backtesting.minute_backtest_engine.MinuteBacktestEngine",
      "analytics.minute_performance_analytics.MinutePerformanceAnalytics",
      "visualization.minute_visualization.MinuteVisualizationSuite",
      "types.SimpleNamespace"
    ],
    "classes": [
      "MinuteBacktestOrchestrator"
    ],
    "functions": [
      "main",
      "__init__",
      "_load_config",
      "_setup_logging",
      "run_complete_backtest",
      "_fetch_minute_data",
      "_generate_features",
      "_train_models",
      "_setup_strategy",
      "_run_backtest",
      "_analyze_performance",
      "_create_visualizations",
      "_compile_final_results",
      "_save_results",
      "_make_json_serializable",
      "_log_step",
      "_checkpoint",
      "_log_completion_summary",
      "merge_dicts"
    ],
    "docstring": "Main execution script for 6-month minute-by-minute Random Forest cryptocurrency backtesting.\n\nThis script orchestrates the complete pipeline:\n1. Data fetching (6 months of minute-level data)\n2. Feature engineering (100+ specialized features)\n3. Model training (multi-horizon Random Forest models)\n4. Strategy execution (high-frequency trading strategies)\n5. Backtesting (ultra-fast minute-level backtesting)\n6. Performance analysis (comprehensive analytics)\n7. Visualization (charts, reports, and dashboards)\n\nUsage:\n    python run_minute_backtest.py [options]\n\nAuthor: Claude (Anthropic)\nDate: 2024",
    "last_modified": 1752372822.622369,
    "lines_of_code": 821,
    "trading_relevance": 1.0
  },
  "quick_intensive_training.py": {
    "path": "quick_intensive_training.py",
    "name": "quick_intensive_training",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "gc",
      "sklearn.metrics.r2_score",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel"
    ],
    "classes": [
      "QuickIntensiveTrainer"
    ],
    "functions": [
      "main",
      "__init__",
      "_load_optimized_params",
      "run_quick_intensive_training",
      "_prepare_data",
      "_train_models",
      "_evaluate_performance",
      "_generate_report"
    ],
    "docstring": "Quick intensive training for Cryptocurrency Random Forest models.",
    "last_modified": 1751870607.3193138,
    "lines_of_code": 414,
    "trading_relevance": 1.0
  },
  "train_enhanced_ensemble.py": {
    "path": "train_enhanced_ensemble.py",
    "name": "train_enhanced_ensemble",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "datetime.datetime",
      "os",
      "json",
      "typing.Dict",
      "typing.List",
      "enhanced_rf_ensemble.EnhancedRFEnsemble",
      "traceback"
    ],
    "classes": [],
    "functions": [
      "load_training_data",
      "prepare_enhanced_dataset",
      "train_and_evaluate_ensemble",
      "save_training_results",
      "main"
    ],
    "docstring": "Train Enhanced Random Forest Ensemble on Real Market Data\n\nTrains the multi-model ensemble system on 4-hour cryptocurrency data\ntargeting 4-6% returns based on successful trading patterns.\n\nUsage: python3 train_enhanced_ensemble.py",
    "last_modified": 1752494625.8155582,
    "lines_of_code": 339,
    "trading_relevance": 1.0
  },
  "generate_trading_report.py": {
    "path": "generate_trading_report.py",
    "name": "generate_trading_report",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "re",
      "json",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "warnings",
      "reportlab.lib.pagesizes.letter",
      "reportlab.lib.pagesizes.A4",
      "reportlab.lib.styles.getSampleStyleSheet",
      "reportlab.lib.styles.ParagraphStyle",
      "reportlab.lib.units.inch",
      "reportlab.platypus.SimpleDocTemplate",
      "reportlab.platypus.Paragraph",
      "reportlab.platypus.Spacer",
      "reportlab.platypus.Table",
      "reportlab.platypus.TableStyle",
      "reportlab.platypus.PageBreak",
      "reportlab.lib.colors",
      "reportlab.lib.enums.TA_CENTER",
      "reportlab.lib.enums.TA_LEFT",
      "reportlab.lib.enums.TA_RIGHT",
      "reportlab.platypus.Image",
      "matplotlib.pyplot",
      "matplotlib.dates",
      "matplotlib.patches.Rectangle",
      "numpy",
      "traceback"
    ],
    "classes": [
      "TradingReportGenerator"
    ],
    "functions": [
      "main",
      "__init__",
      "parse_trading_log",
      "_parse_trades",
      "_parse_portfolio_snapshots",
      "_calculate_trade_profits",
      "_get_average_buy_price",
      "create_charts",
      "_create_portfolio_chart",
      "_create_price_chart",
      "_create_trade_distribution_chart",
      "_create_profit_chart",
      "generate_pdf_report",
      "_add_executive_summary",
      "_add_performance_dashboard",
      "_add_trade_log",
      "_add_charts_section",
      "_add_strategic_analysis",
      "generate_complete_report"
    ],
    "docstring": "Comprehensive PDF Trading Report Generator\n\nGenerates a professional PDF report of the 24-hour BTC trading session with:\n- Executive summary with key metrics\n- Complete trade log with profit calculations\n- Portfolio performance charts\n- Strategic analysis and insights\n- Professional formatting for printing\n\nUsage: python3 generate_trading_report.py",
    "last_modified": 1752438210.2177029,
    "lines_of_code": 753,
    "trading_relevance": 1.0
  },
  "generate_html_report.py": {
    "path": "generate_html_report.py",
    "name": "generate_html_report",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "re",
      "json",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "traceback"
    ],
    "classes": [
      "HTMLTradingReportGenerator"
    ],
    "functions": [
      "main",
      "__init__",
      "parse_trading_log",
      "_parse_trades",
      "_parse_portfolio_snapshots",
      "get_current_metrics",
      "generate_html_report",
      "_get_css_styles",
      "_generate_header",
      "_generate_executive_summary",
      "_generate_portfolio_progression",
      "_generate_trade_log",
      "_generate_performance_analysis",
      "_generate_footer",
      "_get_javascript",
      "generate_complete_report"
    ],
    "docstring": "HTML Trading Report Generator\n\nGenerates a comprehensive, printable HTML report of the 24-hour BTC trading session.\nCan be opened in any browser and printed to PDF.\n\nUsage: python3 generate_html_report.py",
    "last_modified": 1752492918.08595,
    "lines_of_code": 854,
    "trading_relevance": 1.0
  },
  "agent03_execution.py": {
    "path": "agent03_execution.py",
    "name": "agent03_execution",
    "type": "trading",
    "priority": "CRITICAL",
    "dependencies": [],
    "imports": [
      "time",
      "os",
      "json",
      "signal",
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "joblib",
      "sklearn.preprocessing.StandardScaler",
      "warnings",
      "ccxt"
    ],
    "classes": [
      "Agent03ExecutionEngine"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "setup_exchange",
      "load_models",
      "get_market_data",
      "_calculate_indicators",
      "generate_trading_signals",
      "_generate_ml_entry_signal",
      "_generate_rule_based_entry_signal",
      "_generate_ml_position_size",
      "_generate_rule_based_position_size",
      "_generate_ml_exit_signal",
      "_generate_rule_based_exit_signal",
      "execute_trade",
      "_execute_buy",
      "_execute_sell",
      "get_portfolio_value",
      "check_risk_management",
      "update_trading_parameters",
      "generate_hourly_report",
      "save_session_data",
      "run_24h_trading_session",
      "_generate_final_report",
      "_signal_handler"
    ],
    "docstring": "Agent03: Execution Engine Developer\n\nBuilds live/paper trading system using ccxt (or Alpaca/IBKR),\nenforces position sizing, handles live order flow.",
    "last_modified": 1752498532.9196992,
    "lines_of_code": 869,
    "trading_relevance": 1.0
  },
  "__init__.py": {
    "path": "__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "main.CryptoRFTradingSystem"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Cryptocurrency Random Forest Trading System.\n\nA sophisticated cryptocurrency trading system using Random Forest machine learning\nfor multi-asset portfolio management with long/short strategies and monthly rebalancing.",
    "last_modified": 1751665554.974697,
    "lines_of_code": 13,
    "trading_relevance": 0.02824858757062147
  },
  "data_validation_schema.py": {
    "path": "data_validation_schema.py",
    "name": "data_validation_schema",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "json"
    ],
    "classes": [
      "DataValidator"
    ],
    "functions": [
      "main",
      "__init__",
      "_define_schema",
      "_define_quality_thresholds",
      "validate_dataset",
      "_validate_schema",
      "_validate_quality",
      "_validate_symbol_coverage",
      "_validate_temporal_integrity",
      "_validate_momentum_thresholds",
      "_validate_financial_integrity",
      "save_validation_report",
      "get_validation_summary"
    ],
    "docstring": "Data Quality Validation Schema for Crypto Trading System\n\nImplements comprehensive data validation, schema checks, and quality assurance\nfor the 19K+ training rows across 20+ cryptocurrencies.\n\nUsage: from data_validation_schema import DataValidator",
    "last_modified": 1752496617.9742968,
    "lines_of_code": 444,
    "trading_relevance": 1.0
  },
  "ultrathink_main.py": {
    "path": "ultrathink_main.py",
    "name": "ultrathink_main",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "logging",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "json",
      "argparse",
      "sys",
      "pathlib.Path",
      "ultrathink.UltraThinkReasoningEngine",
      "ultrathink.UltraThinkMarketAnalyzer",
      "ultrathink.UltraThinkStrategySelector",
      "ultrathink.UltraThinkDecisionFramework",
      "ultrathink.decision_framework.DecisionType",
      "ultrathink.decision_framework.DecisionPriority",
      "ultrathink.decision_framework.MarketContext",
      "ultrathink.decision_framework.TradingDecision",
      "ultrathink.strategy_selector.MarketRegime",
      "ultrathink.strategy_selector.StrategyRecommendation",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.ultra_feature_engineering.UltraFeatureEngine",
      "utils.config.load_config",
      "utils.config.get_default_config",
      "utils.checkpoint_manager.get_checkpoint_manager",
      "utils.checkpoint_manager.start_auto_checkpoints",
      "utils.visualization.create_full_report",
      "types.SimpleNamespace",
      "traceback"
    ],
    "classes": [
      "UltraThinkTradingSystem"
    ],
    "functions": [
      "__init__",
      "_setup_logging",
      "_engineer_features",
      "_detect_market_regime",
      "_generate_portfolio_summary",
      "_generate_portfolio_recommendations",
      "_assess_portfolio_risk",
      "_generate_risk_recommendations"
    ],
    "docstring": "UltraThink Crypto Trading System: Main integration script with advanced reasoning.",
    "last_modified": 1752359896.1585722,
    "lines_of_code": 657,
    "trading_relevance": 1.0
  },
  "test_fixed_optimization.py": {
    "path": "test_fixed_optimization.py",
    "name": "test_fixed_optimization",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "advanced_hyperparameter_optimization.AdvancedHyperparameterOptimizer",
      "traceback"
    ],
    "classes": [],
    "functions": [
      "test_fixed_optimization",
      "main"
    ],
    "docstring": "Test the fixed optimization with reduced scope to verify it works.",
    "last_modified": 1751878701.9737175,
    "lines_of_code": 153,
    "trading_relevance": 0.8940677966101694
  },
  "enhanced_paper_trader_24h.py": {
    "path": "enhanced_paper_trader_24h.py",
    "name": "enhanced_paper_trader_24h",
    "type": "trading",
    "priority": "CRITICAL",
    "dependencies": [],
    "imports": [
      "yfinance",
      "pandas",
      "numpy",
      "joblib",
      "time",
      "datetime.datetime",
      "datetime.timedelta",
      "os",
      "signal",
      "sys",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "traceback",
      "traceback"
    ],
    "classes": [
      "EnhancedPaperTradingAccount",
      "EnhancedBTCPaperTrader"
    ],
    "functions": [
      "main",
      "__init__",
      "get_total_value",
      "get_return_pct",
      "can_buy",
      "can_sell",
      "buy",
      "sell",
      "__init__",
      "load_models",
      "fetch_current_data",
      "calculate_enhanced_features",
      "calculate_atr",
      "generate_enhanced_signals",
      "execute_trade",
      "log_trade",
      "log_status",
      "setup_session",
      "signal_handler",
      "run_24h_session",
      "generate_final_report"
    ],
    "docstring": "Enhanced 24-Hour BTC Paper Trading with Random Forest Models\n\nDeploys the enhanced multi-model Random Forest system targeting 4-6% returns\nbased on successful trading patterns from the previous 2.82% session.\n\nFeatures:\n- Dynamic position sizing (0.464-0.800 BTC range)\n- Momentum threshold detection (1.780%/hour)\n- Optimal timing optimization (3 AM preference)\n- Multi-model ensemble decisions\n- Advanced risk management\n\nUsage: python3 enhanced_paper_trader_24h.py",
    "last_modified": 1752495498.158532,
    "lines_of_code": 531,
    "trading_relevance": 1.0
  },
  "main.py": {
    "path": "main.py",
    "name": "main",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "argparse",
      "sys",
      "os",
      "datetime.datetime",
      "pathlib.Path",
      "typing.Dict",
      "utils.config.load_config",
      "utils.config.get_default_config",
      "data.data_fetcher.CryptoDataFetcher",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "backtesting.backtest_engine.CryptoBacktestEngine",
      "backtesting.backtest_engine.run_walk_forward_backtest",
      "utils.visualization.create_full_report",
      "json"
    ],
    "classes": [
      "CryptoRFTradingSystem"
    ],
    "functions": [
      "setup_logging",
      "parse_arguments",
      "__init__",
      "engineer_features",
      "prepare_model",
      "train_model",
      "run_backtest",
      "generate_report",
      "save_results"
    ],
    "docstring": "Main execution script for the Crypto Random Forest Trading System.",
    "last_modified": 1751720450.021316,
    "lines_of_code": 405,
    "trading_relevance": 1.0
  },
  "interactive_training.py": {
    "path": "interactive_training.py",
    "name": "interactive_training",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "colorlog"
    ],
    "classes": [
      "InteractiveTrainer"
    ],
    "functions": [
      "__init__",
      "_engineer_features",
      "_evaluate_model",
      "_generate_predictions",
      "_display_results",
      "_create_visualization"
    ],
    "docstring": "Interactive training session for the Crypto RF Trading System.",
    "last_modified": 1751815299.3481266,
    "lines_of_code": 439,
    "trading_relevance": 1.0
  },
  "data_fetcher_4h.py": {
    "path": "data_fetcher_4h.py",
    "name": "data_fetcher_4h",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "yfinance",
      "pandas",
      "numpy",
      "os",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "warnings",
      "talib",
      "json",
      "traceback"
    ],
    "classes": [
      "CryptoDataFetcher4H"
    ],
    "functions": [
      "main",
      "__init__",
      "fetch_crypto_data",
      "calculate_technical_indicators",
      "_calculate_atr",
      "engineer_features",
      "create_target_variables",
      "clean_and_validate_data",
      "fetch_all_symbols",
      "save_dataset",
      "run_complete_pipeline"
    ],
    "docstring": "4-Hour Cryptocurrency Data Fetcher and Cleaner\n\nFetches extensive 4-hour interval cryptocurrency data for Random Forest model training.\nIncludes comprehensive data cleaning, feature engineering, and preprocessing pipeline.\n\nUsage: python3 data_fetcher_4h.py",
    "last_modified": 1752494008.3258178,
    "lines_of_code": 408,
    "trading_relevance": 1.0
  },
  "optimized_deployment.py": {
    "path": "optimized_deployment.py",
    "name": "optimized_deployment",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "json",
      "time",
      "signal",
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.preprocessing.StandardScaler",
      "joblib",
      "warnings"
    ],
    "classes": [
      "OptimizedTradingDeployment"
    ],
    "functions": [
      "main",
      "__init__",
      "_log",
      "train_optimized_models",
      "_prepare_enhanced_features",
      "_train_entry_model",
      "_train_position_model",
      "_train_exit_model",
      "_train_profit_model",
      "_create_simplified_models",
      "get_current_data",
      "generate_signals",
      "execute_trade",
      "get_portfolio_value",
      "run_24h_session",
      "_generate_hourly_report",
      "_save_session_data",
      "_generate_final_report",
      "_signal_handler"
    ],
    "docstring": "Optimized Model Deployment for 24-Hour Trading\n\nDeploys the enhanced Random Forest models with optimized parameters\nbased on the successful pattern analysis from previous sessions.",
    "last_modified": 1752497833.2368712,
    "lines_of_code": 713,
    "trading_relevance": 1.0
  },
  "quick_status.py": {
    "path": "quick_status.py",
    "name": "quick_status",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "re",
      "datetime.datetime",
      "subprocess"
    ],
    "classes": [],
    "functions": [
      "parse_latest_status"
    ],
    "docstring": "Quick Trading Session Status Check",
    "last_modified": 1752421931.887544,
    "lines_of_code": 122,
    "trading_relevance": 1.0
  },
  "enhanced_rf_ensemble.py": {
    "path": "enhanced_rf_ensemble.py",
    "name": "enhanced_rf_ensemble",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "warnings",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.model_selection.train_test_split",
      "sklearn.model_selection.cross_val_score",
      "sklearn.model_selection.GridSearchCV",
      "sklearn.metrics.classification_report",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.precision_score",
      "sklearn.metrics.recall_score",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.preprocessing.LabelEncoder",
      "joblib",
      "enhanced_momentum_features.MomentumFeatureEngineer",
      "os",
      "traceback"
    ],
    "classes": [
      "EnhancedRFEnsemble"
    ],
    "functions": [
      "main",
      "__init__",
      "_get_default_config",
      "prepare_training_data",
      "_get_entry_features",
      "_get_position_features",
      "_get_exit_features",
      "_get_risk_features",
      "train_ensemble",
      "_train_entry_model",
      "_train_position_model",
      "_train_exit_model",
      "_train_risk_model",
      "predict_trading_signals",
      "get_feature_importance",
      "save_ensemble",
      "load_ensemble"
    ],
    "docstring": "Enhanced Random Forest Ensemble System for High-Profit Trading\n\nMulti-model ensemble system targeting 4-6% returns based on successful trading patterns:\n- Entry Timing Model: Identifies optimal entry points (1.780%/hour momentum threshold)\n- Position Sizing Model: Optimizes position sizes (0.464-0.800 BTC range)\n- Exit Timing Model: Determines optimal exits (0.6-1.2h cycles)\n- Risk Management Model: Manages downside risk and drawdowns\n\nUsage: python3 enhanced_rf_ensemble.py",
    "last_modified": 1752494498.3777559,
    "lines_of_code": 544,
    "trading_relevance": 1.0
  },
  "active_paper_trading.py": {
    "path": "active_paper_trading.py",
    "name": "active_paper_trading",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel",
      "colorlog"
    ],
    "classes": [
      "ActiveCryptoPaperTrader"
    ],
    "functions": [
      "__init__",
      "_make_symbol_prediction",
      "_convert_to_signal",
      "_update_portfolio_values",
      "_print_enhanced_summary",
      "_generate_enhanced_report",
      "_calculate_max_drawdown",
      "_create_enhanced_visualization"
    ],
    "docstring": "Active paper trading with enhanced trading logic and debugging.",
    "last_modified": 1751827195.760273,
    "lines_of_code": 558,
    "trading_relevance": 1.0
  },
  "demo_minute_backtest.py": {
    "path": "demo_minute_backtest.py",
    "name": "demo_minute_backtest",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "logging",
      "json",
      "time",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "pandas",
      "numpy",
      "yfinance",
      "data.minute_data_manager.MinuteDataManager",
      "features.minute_feature_engineering.MinuteFeatureEngine",
      "models.minute_random_forest_model.MinuteRandomForestModel",
      "strategies.minute_trading_strategies.MinuteStrategyEnsemble",
      "backtesting.minute_backtest_engine.MinuteBacktestEngine",
      "analytics.minute_performance_analytics.MinutePerformanceAnalytics",
      "visualization.minute_visualization.MinuteVisualizationSuite",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.preprocessing.StandardScaler"
    ],
    "classes": [
      "SimpleModel"
    ],
    "functions": [
      "setup_logging",
      "fetch_recent_minute_data",
      "create_synthetic_data",
      "generate_sample_features",
      "train_demo_model",
      "run_demo_backtest",
      "analyze_demo_performance",
      "create_demo_visualizations",
      "main",
      "__init__",
      "predict_multi_horizon"
    ],
    "docstring": "Demo script for minute-level Random Forest cryptocurrency backtesting.\n\nThis demo works with available recent data (last 7 days of 1-minute data)\nto demonstrate the complete pipeline functionality.\n\nUsage: python3 demo_minute_backtest.py",
    "last_modified": 1752373395.5707338,
    "lines_of_code": 555,
    "trading_relevance": 1.0
  },
  "fast_backtest.py": {
    "path": "fast_backtest.py",
    "name": "fast_backtest",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "warnings",
      "utils.config.get_default_config",
      "utils.config.Config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "models.random_forest_model.EnsembleRandomForestModel"
    ],
    "classes": [
      "FastBacktester"
    ],
    "functions": [
      "main",
      "__init__",
      "_load_optimized_params",
      "run_fast_backtest",
      "_prepare_data",
      "_train_model",
      "_run_backtest",
      "_calculate_metrics",
      "_compare_benchmarks",
      "_generate_report"
    ],
    "docstring": "Fast backtesting for Cryptocurrency Random Forest Trading System.",
    "last_modified": 1751830539.9640262,
    "lines_of_code": 443,
    "trading_relevance": 1.0
  },
  "generate_trading_pdf_report.py": {
    "path": "generate_trading_pdf_report.py",
    "name": "generate_trading_pdf_report",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "re",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "matplotlib",
      "matplotlib.pyplot",
      "matplotlib.dates",
      "matplotlib.patches.Rectangle",
      "numpy",
      "reportlab.lib.colors",
      "reportlab.lib.pagesizes.letter",
      "reportlab.lib.pagesizes.A4",
      "reportlab.platypus.SimpleDocTemplate",
      "reportlab.platypus.Table",
      "reportlab.platypus.TableStyle",
      "reportlab.platypus.Paragraph",
      "reportlab.platypus.Spacer",
      "reportlab.platypus.PageBreak",
      "reportlab.platypus.Image",
      "reportlab.lib.styles.getSampleStyleSheet",
      "reportlab.lib.styles.ParagraphStyle",
      "reportlab.lib.units.inch",
      "reportlab.lib.enums.TA_CENTER",
      "reportlab.lib.enums.TA_RIGHT",
      "reportlab.lib.enums.TA_LEFT",
      "matplotlib.lines.Line2D"
    ],
    "classes": [
      "TradingReportGenerator"
    ],
    "functions": [
      "main",
      "__init__",
      "parse_log_file",
      "_parse_portfolio_block",
      "generate_charts",
      "generate_pdf"
    ],
    "docstring": "Professional PDF Trading Report Generator\n\nGenerates a comprehensive PDF report of the 24-hour BTC trading session including:\n- Executive summary with profits\n- Complete trade log\n- Performance charts\n- Strategic analysis\n\nUsage: python3 generate_trading_pdf_report.py",
    "last_modified": 1752455619.3735359,
    "lines_of_code": 517,
    "trading_relevance": 1.0
  },
  "quick_demo.py": {
    "path": "quick_demo.py",
    "name": "quick_demo",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "pandas",
      "numpy",
      "logging",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "matplotlib.pyplot",
      "seaborn",
      "utils.config.get_default_config",
      "data.yfinance_fetcher.YFinanceCryptoFetcher",
      "features.feature_engineering.CryptoFeatureEngine",
      "models.random_forest_model.CryptoRandomForestModel",
      "sklearn.metrics.mean_absolute_error",
      "sklearn.metrics.r2_score"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Quick demonstration of the Crypto RF Trading System with results.",
    "last_modified": 1751744649.4628136,
    "lines_of_code": 254,
    "trading_relevance": 1.0
  },
  "simple_paper_trader.py": {
    "path": "simple_paper_trader.py",
    "name": "simple_paper_trader",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings"
    ],
    "classes": [
      "SimplePaperTrader"
    ],
    "functions": [
      "main",
      "__init__",
      "fetch_latest_prices",
      "calculate_signals",
      "execute_trades",
      "get_total_value",
      "record_portfolio_snapshot",
      "print_status",
      "run_trading_session",
      "generate_final_report"
    ],
    "docstring": "Simple Paper Trading Demo for Cryptocurrency Trading System\n\nThis demonstrates real-time paper trading functionality with:\n- Live minute data fetching\n- Simple moving average strategy\n- Risk management\n- Real-time portfolio tracking\n\nUsage: python3 simple_paper_trader.py",
    "last_modified": 1752383402.2714663,
    "lines_of_code": 303,
    "trading_relevance": 1.0
  },
  "ultrathink/reasoning_engine.py": {
    "path": "ultrathink/reasoning_engine.py",
    "name": "reasoning_engine",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "logging",
      "numpy",
      "pandas",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "dataclasses.dataclass",
      "enum.Enum",
      "json",
      "datetime.datetime",
      "datetime.timedelta",
      "threading",
      "collections.deque"
    ],
    "classes": [
      "ReasoningLevel",
      "ConfidenceLevel",
      "ReasoningNode",
      "ReasoningChain",
      "UltraThinkReasoningEngine",
      "SurfaceReasoner",
      "TacticalReasoner",
      "StrategicReasoner",
      "MetaReasoner",
      "PhilosophicalReasoner"
    ],
    "functions": [
      "__post_init__",
      "__init__",
      "_get_default_config",
      "_initialize_reasoning_modules",
      "reason_about_market",
      "_reason_at_surface_level",
      "_reason_at_tactical_level",
      "_reason_at_strategic_level",
      "_reason_at_meta_level",
      "_reason_at_philosophical_level",
      "_count_conflicting_conclusions",
      "_synthesize_conclusions",
      "get_reasoning_summary"
    ],
    "docstring": "UltraThink Reasoning Engine: Advanced multi-layered reasoning for trading decisions.",
    "last_modified": 1752355844.9381115,
    "lines_of_code": 649,
    "trading_relevance": 1.0
  },
  "ultrathink/decision_framework.py": {
    "path": "ultrathink/decision_framework.py",
    "name": "decision_framework",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "logging",
      "numpy",
      "pandas",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "typing.Callable",
      "dataclasses.dataclass",
      "dataclasses.field",
      "datetime.datetime",
      "datetime.timedelta",
      "enum.Enum",
      "json",
      "threading",
      "concurrent.futures.ThreadPoolExecutor",
      "time",
      "reasoning_engine.UltraThinkReasoningEngine",
      "reasoning_engine.ReasoningChain",
      "reasoning_engine.ReasoningLevel",
      "market_analyzer.UltraThinkMarketAnalyzer",
      "market_analyzer.MarketState",
      "strategy_selector.UltraThinkStrategySelector",
      "strategy_selector.StrategyRecommendation"
    ],
    "classes": [
      "DecisionType",
      "DecisionPriority",
      "DecisionStatus",
      "TradingDecision",
      "MarketContext",
      "DecisionMetrics",
      "UltraThinkDecisionFramework"
    ],
    "functions": [
      "market_state_risk_level_numeric",
      "__init__",
      "_get_default_config",
      "_calculate_optimal_position_size",
      "_calculate_position_risk",
      "_calculate_target_allocation",
      "_calculate_current_allocation",
      "_determine_priority",
      "_update_decision_metrics",
      "add_execution_callback",
      "add_monitoring_callback",
      "get_decision_status",
      "get_decision_metrics",
      "get_recent_decisions"
    ],
    "docstring": "UltraThink Decision Framework: Real-time decision making with advanced reasoning chains.",
    "last_modified": 1752356558.892878,
    "lines_of_code": 910,
    "trading_relevance": 1.0
  },
  "ultrathink/__init__.py": {
    "path": "ultrathink/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "reasoning_engine.UltraThinkReasoningEngine",
      "market_analyzer.UltraThinkMarketAnalyzer",
      "strategy_selector.UltraThinkStrategySelector",
      "decision_framework.UltraThinkDecisionFramework"
    ],
    "classes": [],
    "functions": [],
    "docstring": "UltraThink: Advanced reasoning and decision-making system for crypto trading.",
    "last_modified": 1752355731.7183335,
    "lines_of_code": 13,
    "trading_relevance": 0.08474576271186442
  },
  "ultrathink/market_analyzer.py": {
    "path": "ultrathink/market_analyzer.py",
    "name": "market_analyzer",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "numpy",
      "pandas",
      "logging",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "dataclasses.dataclass",
      "datetime.datetime",
      "datetime.timedelta",
      "threading",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "warnings",
      "reasoning_engine.UltraThinkReasoningEngine",
      "reasoning_engine.ReasoningLevel"
    ],
    "classes": [
      "MarketDimension",
      "MarketState",
      "UltraThinkMarketAnalyzer",
      "MarketDimensionAnalyzer",
      "TechnicalDimension",
      "MomentumDimension",
      "VolatilityDimension",
      "LiquidityDimension",
      "MicrostructureDimension",
      "SentimentDimension",
      "RegimeDimension",
      "CorrelationDimension"
    ],
    "functions": [
      "__init__",
      "_get_default_config",
      "analyze_market",
      "_analyze_dimension",
      "_synthesize_market_state",
      "_calculate_risk_level",
      "_calculate_opportunity_score",
      "get_analysis_summary",
      "analyze",
      "calculate_confidence",
      "analyze",
      "calculate_confidence",
      "analyze",
      "analyze",
      "analyze",
      "analyze",
      "analyze",
      "analyze",
      "analyze"
    ],
    "docstring": "UltraThink Market Analyzer: Advanced multi-dimensional market analysis.",
    "last_modified": 1752356120.94534,
    "lines_of_code": 793,
    "trading_relevance": 1.0
  },
  "ultrathink/strategy_selector.py": {
    "path": "ultrathink/strategy_selector.py",
    "name": "strategy_selector",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "numpy",
      "pandas",
      "logging",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "typing.Callable",
      "dataclasses.dataclass",
      "dataclasses.field",
      "datetime.datetime",
      "datetime.timedelta",
      "enum.Enum",
      "json",
      "abc.ABC",
      "abc.abstractmethod",
      "reasoning_engine.UltraThinkReasoningEngine",
      "reasoning_engine.ReasoningChain",
      "market_analyzer.UltraThinkMarketAnalyzer",
      "market_analyzer.MarketState"
    ],
    "classes": [
      "StrategyType",
      "MarketRegime",
      "StrategyMetrics",
      "StrategyConfiguration",
      "StrategyRecommendation",
      "BaseStrategy",
      "UltraThinkStrategySelector",
      "MomentumStrategy",
      "MeanReversionStrategy",
      "BreakoutStrategy",
      "TrendFollowingStrategy",
      "VolatilityStrategy"
    ],
    "functions": [
      "__init__",
      "generate_signals",
      "calculate_position_size",
      "get_market_fit_score",
      "update_metrics",
      "__init__",
      "_get_default_config",
      "_initialize_strategies",
      "_build_regime_mapping",
      "select_optimal_strategy",
      "_detect_market_regime",
      "_reason_about_strategy_selection",
      "_score_strategy",
      "_calculate_performance_score",
      "_calculate_risk_score",
      "_generate_implementation_notes",
      "_identify_risk_factors",
      "get_strategy_ensemble",
      "update_strategy_performance",
      "get_adaptation_history",
      "emergency_stop_check",
      "generate_signals",
      "calculate_position_size",
      "get_market_fit_score",
      "generate_signals",
      "calculate_position_size",
      "get_market_fit_score",
      "generate_signals",
      "calculate_position_size",
      "get_market_fit_score",
      "generate_signals",
      "calculate_position_size",
      "get_market_fit_score",
      "generate_signals",
      "calculate_position_size",
      "get_market_fit_score"
    ],
    "docstring": "UltraThink Strategy Selector: Adaptive strategy selection with advanced reasoning.",
    "last_modified": 1752356344.0606875,
    "lines_of_code": 810,
    "trading_relevance": 1.0
  },
  "tree-sitter-python/setup.py": {
    "path": "tree-sitter-python/setup.py",
    "name": "setup",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "os.path.isdir",
      "os.path.join",
      "platform.system",
      "setuptools.Extension",
      "setuptools.find_packages",
      "setuptools.setup",
      "setuptools.command.build.build",
      "wheel.bdist_wheel.bdist_wheel"
    ],
    "classes": [
      "Build",
      "BdistWheel"
    ],
    "functions": [
      "run",
      "get_tag"
    ],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 62,
    "trading_relevance": 0.04519774011299436
  },
  "tree-sitter-python/bindings/python/tree_sitter_python/__init__.py": {
    "path": "tree-sitter-python/bindings/python/tree_sitter_python/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "importlib.resources.files",
      "_binding.language"
    ],
    "classes": [],
    "functions": [
      "_get_query",
      "__getattr__",
      "__dir__"
    ],
    "docstring": "Python grammar for tree-sitter",
    "last_modified": 1752565186.9120367,
    "lines_of_code": 34,
    "trading_relevance": 0.11299435028248588
  },
  "tree-sitter-python/bindings/python/tests/test_binding.py": {
    "path": "tree-sitter-python/bindings/python/tests/test_binding.py",
    "name": "test_binding",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "unittest.TestCase",
      "tree_sitter",
      "tree_sitter_python"
    ],
    "classes": [
      "TestLanguage"
    ],
    "functions": [
      "test_can_load_grammar"
    ],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 11,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/mixed-spaces-tabs.py": {
    "path": "tree-sitter-python/examples/mixed-spaces-tabs.py",
    "name": "mixed-spaces-tabs",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/crlf-line-endings.py": {
    "path": "tree-sitter-python/examples/crlf-line-endings.py",
    "name": "crlf-line-endings",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/python2-grammar.py": {
    "path": "tree-sitter-python/examples/python2-grammar.py",
    "name": "python2-grammar",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/tabs.py": {
    "path": "tree-sitter-python/examples/tabs.py",
    "name": "tabs",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [
      "set_password",
      "main"
    ],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 32,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/multiple-newlines.py": {
    "path": "tree-sitter-python/examples/multiple-newlines.py",
    "name": "multiple-newlines",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/compound-statement-without-trailing-newline.py": {
    "path": "tree-sitter-python/examples/compound-statement-without-trailing-newline.py",
    "name": "compound-statement-without-trailing-newline",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/python3.8_grammar.py": {
    "path": "tree-sitter-python/examples/python3.8_grammar.py",
    "name": "python3.8_grammar",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/trailing-whitespace.py": {
    "path": "tree-sitter-python/examples/trailing-whitespace.py",
    "name": "trailing-whitespace",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/simple-statements-without-trailing-newline.py": {
    "path": "tree-sitter-python/examples/simple-statements-without-trailing-newline.py",
    "name": "simple-statements-without-trailing-newline",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/python3-grammar-crlf.py": {
    "path": "tree-sitter-python/examples/python3-grammar-crlf.py",
    "name": "python3-grammar-crlf",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "test.support.run_unittest",
      "test.support.check_syntax_error",
      "unittest",
      "sys",
      "sys.*",
      "sys.maxsize",
      "sys",
      "time",
      "sys",
      "time.time",
      "time.time",
      "sys.path",
      "sys.argv",
      "sys.path",
      "sys.argv",
      "sys.path",
      "sys.argv",
      "sys",
      "time"
    ],
    "classes": [
      "TokenTests",
      "GrammarTests",
      "Squares",
      "B",
      "B2",
      "C1",
      "C2",
      "D",
      "C",
      "G",
      "manager"
    ],
    "functions": [
      "test_main",
      "testBackslash",
      "testPlainIntegers",
      "testLongIntegers",
      "testUnderscoresInNumbers",
      "testFloats",
      "testEllipsis",
      "testEvalInput",
      "testFuncdef",
      "testLambdef",
      "testSimpleStmt",
      "testExprStmt",
      "testDelStmt",
      "testPassStmt",
      "testBreakStmt",
      "testContinueStmt",
      "test_break_continue_loop",
      "testReturn",
      "testYield",
      "testRaise",
      "testImport",
      "testGlobal",
      "testNonlocal",
      "testAssert",
      "testIf",
      "testWhile",
      "testFor",
      "testTry",
      "testSuite",
      "testTest",
      "testComparison",
      "testBinaryMaskOps",
      "testShiftOps",
      "testAdditiveOps",
      "testMultiplicativeOps",
      "testUnaryOps",
      "testSelectors",
      "testAtoms",
      "testClassdef",
      "testDictcomps",
      "testListcomps",
      "testGenexps",
      "testComprehensionSpecials",
      "test_with_statement",
      "testIfElseExpr",
      "testStringLiterals",
      "f1",
      "f2",
      "f3",
      "a1",
      "a2",
      "v0",
      "v1",
      "v2",
      "d01",
      "d11",
      "d21",
      "d02",
      "d12",
      "d22",
      "d01v",
      "d11v",
      "d21v",
      "d02v",
      "d12v",
      "d22v",
      "pos0key1",
      "pos2key2",
      "pos2key2dict",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "null",
      "f",
      "f",
      "f",
      "f",
      "f",
      "foo",
      "test_inner",
      "g1",
      "g2",
      "f",
      "class_decorator",
      "test_in_func",
      "test_nested_front",
      "_checkeval",
      "__init__",
      "__len__",
      "__getitem__",
      "meth1",
      "meth2",
      "meth3",
      "__enter__",
      "__exit__"
    ],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 945,
    "trading_relevance": 0.9759887005649717
  },
  "tree-sitter-python/examples/python2-grammar-crlf.py": {
    "path": "tree-sitter-python/examples/python2-grammar-crlf.py",
    "name": "python2-grammar-crlf",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/examples/python3-grammar.py": {
    "path": "tree-sitter-python/examples/python3-grammar.py",
    "name": "python3-grammar",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "test.support.run_unittest",
      "test.support.check_syntax_error",
      "unittest",
      "sys",
      "sys.*",
      "sys.maxsize",
      "sys",
      "time",
      "sys",
      "time.time",
      "time.time",
      "sys.path",
      "sys.argv",
      "sys.path",
      "sys.argv",
      "sys.path",
      "sys.argv",
      "sys",
      "time"
    ],
    "classes": [
      "TokenTests",
      "GrammarTests",
      "Squares",
      "B",
      "B2",
      "C1",
      "C2",
      "D",
      "C",
      "G",
      "manager"
    ],
    "functions": [
      "test_main",
      "testBackslash",
      "testPlainIntegers",
      "testLongIntegers",
      "testUnderscoresInNumbers",
      "testFloats",
      "testEllipsis",
      "testEvalInput",
      "testFuncdef",
      "testLambdef",
      "testSimpleStmt",
      "testExprStmt",
      "testDelStmt",
      "testPassStmt",
      "testBreakStmt",
      "testContinueStmt",
      "test_break_continue_loop",
      "testReturn",
      "testYield",
      "testRaise",
      "testImport",
      "testGlobal",
      "testNonlocal",
      "testAssert",
      "testIf",
      "testWhile",
      "testFor",
      "testTry",
      "testSuite",
      "testTest",
      "testComparison",
      "testBinaryMaskOps",
      "testShiftOps",
      "testAdditiveOps",
      "testMultiplicativeOps",
      "testUnaryOps",
      "testSelectors",
      "testAtoms",
      "testClassdef",
      "testDictcomps",
      "testListcomps",
      "testGenexps",
      "testComprehensionSpecials",
      "test_with_statement",
      "testIfElseExpr",
      "testStringLiterals",
      "f1",
      "f2",
      "f3",
      "a1",
      "a2",
      "v0",
      "v1",
      "v2",
      "d01",
      "d11",
      "d21",
      "d02",
      "d12",
      "d22",
      "d01v",
      "d11v",
      "d21v",
      "d02v",
      "d12v",
      "d22v",
      "pos0key1",
      "pos2key2",
      "pos2key2dict",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "f",
      "null",
      "f",
      "f",
      "f",
      "f",
      "f",
      "foo",
      "test_inner",
      "g1",
      "g2",
      "f",
      "class_decorator",
      "test_in_func",
      "test_nested_front",
      "_checkeval",
      "__init__",
      "__len__",
      "__getitem__",
      "meth1",
      "meth2",
      "meth3",
      "__enter__",
      "__exit__"
    ],
    "docstring": null,
    "last_modified": 1752565186.9120367,
    "lines_of_code": 945,
    "trading_relevance": 0.9759887005649717
  },
  "tree-sitter-python/test/tags/main.py": {
    "path": "tree-sitter-python/test/tags/main.py",
    "name": "main",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.921674,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/test/highlight/pattern_matching.py": {
    "path": "tree-sitter-python/test/highlight/pattern_matching.py",
    "name": "pattern_matching",
    "type": "unknown",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.921674,
    "lines_of_code": 0,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/test/highlight/parameters.py": {
    "path": "tree-sitter-python/test/highlight/parameters.py",
    "name": "parameters",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [
      "g"
    ],
    "docstring": null,
    "last_modified": 1752565186.921674,
    "lines_of_code": 4,
    "trading_relevance": 0.0
  },
  "tree-sitter-python/test/highlight/keywords.py": {
    "path": "tree-sitter-python/test/highlight/keywords.py",
    "name": "keywords",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [],
    "classes": [],
    "functions": [],
    "docstring": null,
    "last_modified": 1752565186.921674,
    "lines_of_code": 30,
    "trading_relevance": 0.0790960451977401
  },
  "phase1/walk_forward_engine.py": {
    "path": "phase1/walk_forward_engine.py",
    "name": "walk_forward_engine",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.List",
      "typing.Dict",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "warnings",
      "pathlib.Path",
      "json",
      "os",
      "glob",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.precision_score",
      "sklearn.metrics.recall_score",
      "sklearn.metrics.f1_score",
      "sklearn.metrics.roc_auc_score",
      "sklearn.metrics.log_loss",
      "scipy.stats",
      "sklearn.ensemble.RandomForestClassifier"
    ],
    "classes": [
      "WalkForwardEngine"
    ],
    "functions": [
      "main",
      "calculate_rsi",
      "__init__",
      "run_walk_forward_analysis",
      "_validate_inputs",
      "_generate_walk_forward_windows",
      "_execute_window_test",
      "_calculate_accuracy",
      "_calculate_precision",
      "_calculate_recall",
      "_calculate_f1",
      "_calculate_auc",
      "_calculate_log_loss",
      "_simulate_trading_performance",
      "_extract_feature_importance",
      "_analyze_market_conditions",
      "_calculate_period_drawdown",
      "_calculate_trend_strength",
      "_aggregate_walk_forward_results",
      "_perform_statistical_analysis",
      "_perform_attribution_analysis",
      "_analyze_temporal_performance",
      "_save_walk_forward_results",
      "_make_json_serializable",
      "_print_walk_forward_summary",
      "model_factory"
    ],
    "docstring": "Phase 1C: Walk-Forward Testing Engine\nULTRATHINK Implementation - Robust Out-of-Sample Validation\n\nImplements institutional-grade walk-forward analysis:\n- 6-month rolling test windows \n- 36-month minimum training periods\n- Statistical significance testing\n- Performance attribution analysis\n- Regime-aware validation\n\nBased on ULTRATHINK research for preventing overfitting in crypto trading.",
    "last_modified": 1752508677.0605276,
    "lines_of_code": 755,
    "trading_relevance": 1.0
  },
  "phase1/cpcv_framework.py": {
    "path": "phase1/cpcv_framework.py",
    "name": "cpcv_framework",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.List",
      "typing.Tuple",
      "typing.Dict",
      "typing.Optional",
      "typing.Iterator",
      "itertools.combinations",
      "warnings",
      "sklearn.model_selection.BaseCrossValidator",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.precision_score",
      "sklearn.metrics.recall_score",
      "sklearn.metrics.f1_score",
      "joblib",
      "os",
      "glob",
      "sklearn.ensemble.RandomForestClassifier",
      "math.comb",
      "scipy.stats",
      "json",
      "sklearn.base.clone",
      "sklearn.metrics.roc_auc_score",
      "sklearn.metrics.log_loss"
    ],
    "classes": [
      "CombinatorialPurgedCV",
      "CPCVBacktester"
    ],
    "functions": [
      "main",
      "calculate_rsi",
      "__init__",
      "split",
      "_create_base_splits",
      "_create_purged_split",
      "get_n_splits",
      "__init__",
      "validate_model",
      "_clone_model",
      "_calculate_fold_metrics",
      "_aggregate_results",
      "_calculate_overfitting_metrics",
      "_analyze_temporal_stability",
      "_perform_statistical_tests",
      "_save_validation_results",
      "_make_json_serializable",
      "_print_validation_summary"
    ],
    "docstring": "Phase 1B: Combinatorial Purged Cross-Validation (CPCV) Framework\nULTRATHINK Implementation - 80% Overfitting Reduction Target\n\nBased on institutional research findings:\n- CAGR improvement: -7% to +16%\n- Sharpe ratio improvement: 0.0 to 0.9\n- 80% reduction in overfitting vs traditional methods\n- Multiple backtest paths for robust validation\n\nImplementation following 2024 academic research on crypto overfitting prevention.",
    "last_modified": 1752508518.1834216,
    "lines_of_code": 568,
    "trading_relevance": 1.0
  },
  "phase1/enhanced_data_collector.py": {
    "path": "phase1/enhanced_data_collector.py",
    "name": "enhanced_data_collector",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "yfinance",
      "requests",
      "time",
      "os",
      "json",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "warnings"
    ],
    "classes": [
      "EnhancedDataCollector"
    ],
    "functions": [
      "main",
      "__init__",
      "ensure_directories",
      "fetch_primary_data",
      "validate_data_quality",
      "_calculate_expected_periods",
      "_validate_price_data",
      "_check_ohlc_relationship",
      "_check_extreme_price_moves",
      "_validate_volume_data",
      "_check_zero_volume_streaks",
      "_analyze_data_gaps",
      "_validate_statistics",
      "save_data_and_report",
      "collect_comprehensive_dataset"
    ],
    "docstring": "Phase 1A: Enhanced 4+ Year Historical Data Collection System\nULTRATHINK Implementation - Institutional Grade Data Infrastructure\n\nFeatures:\n- 4+ years historical data (2020-2025)\n- Multi-source validation and redundancy\n- Data quality checks and validation\n- Regime classification preparation\n- Multi-timeframe synchronization",
    "last_modified": 1752508392.5852313,
    "lines_of_code": 516,
    "trading_relevance": 1.0
  },
  "visualization/minute_visualization.py": {
    "path": "visualization/minute_visualization.py",
    "name": "minute_visualization",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "analytics.minute_performance_analytics.MinutePerformanceAnalytics",
      "matplotlib.pyplot",
      "matplotlib.dates",
      "matplotlib.patches.Rectangle",
      "seaborn",
      "matplotlib.backends.backend_pdf.PdfPages",
      "plotly.graph_objects",
      "plotly.express",
      "plotly.subplots.make_subplots",
      "plotly.offline",
      "logging"
    ],
    "classes": [
      "MinuteVisualizationSuite"
    ],
    "functions": [
      "create_minute_visualization_suite",
      "quick_portfolio_visualization",
      "__init__",
      "_get_default_config",
      "create_comprehensive_dashboard",
      "_create_portfolio_overview",
      "_create_risk_analysis_charts",
      "_create_intraday_analysis",
      "_create_trade_analysis",
      "_create_market_analysis",
      "_create_model_analysis",
      "_create_feature_analysis",
      "_create_correlation_analysis",
      "create_interactive_dashboard",
      "generate_comprehensive_report"
    ],
    "docstring": "Interactive visualization and reporting suite for minute-level cryptocurrency trading analysis.",
    "last_modified": 1752372903.2688026,
    "lines_of_code": 1054,
    "trading_relevance": 1.0
  },
  "crypto_rf_trader/backtest_pipeline.py": {
    "path": "crypto_rf_trader/backtest_pipeline.py",
    "name": "backtest_pipeline",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.model_selection.train_test_split",
      "sklearn.model_selection.TimeSeriesSplit",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.classification_report",
      "sklearn.metrics.confusion_matrix",
      "os",
      "joblib",
      "json",
      "datetime.datetime",
      "warnings"
    ],
    "classes": [
      "BacktestPipeline"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "load_data",
      "_add_technical_indicators",
      "train_and_backtest",
      "run_comprehensive_backtest",
      "save_backtest_summary",
      "analyze_performance_vs_agents"
    ],
    "docstring": "Enhanced Backtest Pipeline for Multi-Agent Trading System\n\nIntegrates with the agent communication system and provides\ncomprehensive backtesting capabilities for model validation.",
    "last_modified": 1752499534.6708755,
    "lines_of_code": 408,
    "trading_relevance": 1.0
  },
  "crypto_rf_trader/agent01_controller.py": {
    "path": "crypto_rf_trader/agent01_controller.py",
    "name": "agent01_controller",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "os",
      "json",
      "subprocess",
      "signal",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional"
    ],
    "classes": [
      "Agent01Controller"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "start_agents",
      "check_agent_health",
      "analyze_performance",
      "suggest_parameter_adjustments",
      "_save_parameter_suggestions",
      "coordinate_optimization_cycle",
      "_save_status_report",
      "main_coordination_loop",
      "_signal_handler"
    ],
    "docstring": "Agent01: Project Manager & Meta-Optimizer Controller\n\nCoordinates development, oversees backtests and parameter tuning,\nmanages meta-optimization lifecycle for the crypto trading system.",
    "last_modified": 1752498783.6511066,
    "lines_of_code": 288,
    "trading_relevance": 1.0
  },
  "crypto_rf_trader/agent02_data_ml.py": {
    "path": "crypto_rf_trader/agent02_data_ml.py",
    "name": "agent02_data_ml",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.model_selection.train_test_split",
      "sklearn.model_selection.TimeSeriesSplit",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.classification_report",
      "pickle",
      "json",
      "time",
      "warnings",
      "deap.base",
      "deap.creator",
      "deap.tools",
      "deap.algorithms"
    ],
    "classes": [
      "Agent02DataML"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "load_data",
      "_generate_synthetic_data",
      "engineer_features",
      "train_models",
      "_save_models",
      "run_ga_optimization",
      "_run_deap_ga",
      "_run_heuristic_optimization",
      "_evaluate_params",
      "_evaluate_params_dict",
      "continuous_retraining_loop"
    ],
    "docstring": "Agent02: Data Loader, Feature Engineer & Random Forest Retrainer\n\nHandles data loading, feature engineering, and model retraining\nwith genetic algorithm optimization (DEAP if available, else heuristics).",
    "last_modified": 1752498732.145177,
    "lines_of_code": 559,
    "trading_relevance": 1.0
  },
  "crypto_rf_trader/agent03_execution.py": {
    "path": "crypto_rf_trader/agent03_execution.py",
    "name": "agent03_execution",
    "type": "trading",
    "priority": "CRITICAL",
    "dependencies": [],
    "imports": [
      "time",
      "os",
      "json",
      "pickle",
      "signal",
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "ccxt"
    ],
    "classes": [
      "Agent03ExecutionEngine"
    ],
    "functions": [
      "main",
      "__init__",
      "log",
      "load_models",
      "setup_exchange",
      "get_market_data",
      "_calculate_indicators",
      "generate_trading_signals",
      "_generate_ml_signals",
      "_generate_rule_based_signals",
      "_calculate_rule_based_position_size",
      "_calculate_rule_based_exit",
      "execute_trade",
      "_execute_buy",
      "_execute_sell",
      "get_portfolio_value",
      "check_risk_management",
      "update_parameters",
      "save_session_data",
      "run_24h_trading_session",
      "_generate_hourly_report",
      "_generate_final_report",
      "_signal_handler"
    ],
    "docstring": "Agent03: Execution Engine Developer\n\nBuilds live/paper trading system using ccxt (or yfinance fallback),\nenforces position sizing, handles live order flow.",
    "last_modified": 1752498910.4016232,
    "lines_of_code": 659,
    "trading_relevance": 1.0
  },
  "paper_trading/minute_paper_trader.py": {
    "path": "paper_trading/minute_paper_trader.py",
    "name": "minute_paper_trader",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "json",
      "time",
      "threading",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "warnings",
      "pandas",
      "numpy",
      "yfinance",
      "data.minute_data_manager.MinuteDataManager",
      "features.minute_feature_engineering.MinuteFeatureEngine",
      "models.minute_random_forest_model.MinuteRandomForestModel",
      "strategies.minute_trading_strategies.MinuteStrategyEnsemble",
      "analytics.minute_performance_analytics.MinutePerformanceAnalytics",
      "visualization.minute_visualization.MinuteVisualizationSuite",
      "argparse",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.preprocessing.StandardScaler",
      "matplotlib.pyplot"
    ],
    "classes": [
      "PaperTradingAccount",
      "MinutePaperTrader",
      "SimpleModelWrapper"
    ],
    "functions": [
      "main",
      "__init__",
      "execute_order",
      "get_total_value",
      "get_positions_summary",
      "record_portfolio_snapshot",
      "__init__",
      "_get_default_config",
      "_setup_logging",
      "initialize_model",
      "_train_new_model",
      "fetch_latest_data",
      "generate_trading_signals",
      "execute_trading_signals",
      "apply_risk_management",
      "print_portfolio_status",
      "save_snapshot",
      "run_trading_loop",
      "generate_final_report",
      "_save_detailed_report",
      "_serialize_trade",
      "_create_performance_charts",
      "__init__",
      "predict_multi_horizon"
    ],
    "docstring": "Real-time paper trading system for minute-level Random Forest cryptocurrency trading.\n\nThis system:\n1. Fetches real-time minute data\n2. Generates features and predictions\n3. Executes trades with simulated money\n4. Tracks performance in real-time\n5. Provides live dashboard and reporting\n\nUsage:\n    python minute_paper_trader.py [--config config.json] [--capital 100000]",
    "last_modified": 1752383324.109725,
    "lines_of_code": 902,
    "trading_relevance": 1.0
  },
  "phase2/fractional_differentiation.py": {
    "path": "phase2/fractional_differentiation.py",
    "name": "fractional_differentiation",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "scipy.special.gamma",
      "scipy.stats",
      "warnings",
      "pathlib.Path",
      "json",
      "datetime.datetime",
      "glob",
      "os",
      "statsmodels.tsa.stattools.adfuller"
    ],
    "classes": [
      "FractionalDifferentiationEngine"
    ],
    "functions": [
      "main",
      "__init__",
      "find_optimal_d",
      "fractional_diff",
      "apply_to_features",
      "_clean_series",
      "_adf_test",
      "_calculate_autocorrelation",
      "_get_weights",
      "_calculate_quality_score",
      "_select_optimal_d",
      "_generate_recommendation",
      "_analyze_feature_transformation",
      "_print_optimization_summary",
      "save_results",
      "generate_summary_report"
    ],
    "docstring": "Phase 2A: Fractional Differentiation Engine\nULTRATHINK Implementation - Advanced Feature Engineering\n\nImplements fractional differentiation for handling non-stationary crypto time series:\n- Optimal d parameter selection using ADF stationarity tests\n- Memory preservation through fractional calculus\n- Stationary feature generation while retaining predictive power\n- Integration with institutional-grade validation framework\n\nBased on ULTRATHINK research addressing 51.1% PBO overfitting risk.",
    "last_modified": 1752520621.251763,
    "lines_of_code": 610,
    "trading_relevance": 1.0
  },
  "phase2/triple_barrier_labeling.py": {
    "path": "phase2/triple_barrier_labeling.py",
    "name": "triple_barrier_labeling",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "typing.Callable",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "dataclasses.dataclass",
      "concurrent.futures.ProcessPoolExecutor",
      "multiprocessing",
      "glob",
      "os",
      "json",
      "traceback"
    ],
    "classes": [
      "TripleBarrierConfig",
      "Individual",
      "TripleBarrierLabeling"
    ],
    "functions": [
      "main",
      "__init__",
      "to_dict",
      "__init__",
      "generate_labels",
      "optimize_barriers_with_ga",
      "initialize_population",
      "calculate_fitness",
      "create_next_generation",
      "tournament_selection",
      "crossover",
      "mutate",
      "apply_triple_barriers",
      "calculate_volatility",
      "add_meta_labeling_features",
      "analyze_labeling_performance",
      "print_labeling_summary"
    ],
    "docstring": "Phase 2A: Triple Barrier Labeling with Genetic Algorithm Optimization\nULTRATHINK Implementation - Advanced Target Generation\n\nImplements sophisticated labeling technique used by institutional trading firms:\n- Triple barrier method (profit, loss, time barriers)\n- Genetic algorithm optimization for barrier parameters\n- Adaptive barrier sizing based on volatility\n- Multi-objective optimization (return vs risk)\n- Meta-labeling for ensemble strategies\n\nDesigned to create higher quality targets and reduce overfitting risk.",
    "last_modified": 1752521039.8153431,
    "lines_of_code": 613,
    "trading_relevance": 1.0
  },
  "phase2/multi_timeframe_fusion.py": {
    "path": "phase2/multi_timeframe_fusion.py",
    "name": "multi_timeframe_fusion",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "typing.Callable",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "dataclasses.dataclass",
      "scipy.stats",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.decomposition.PCA",
      "json",
      "glob",
      "os",
      "traceback"
    ],
    "classes": [
      "MultiTimeframeConfig",
      "MultiTimeframeFusion"
    ],
    "functions": [
      "main",
      "calculate_rsi",
      "__post_init__",
      "__init__",
      "create_multi_timeframe_features",
      "generate_timeframe_features",
      "calculate_cross_timeframe_correlations",
      "generate_attention_weights",
      "_generate_price_based_attention",
      "detect_market_regimes",
      "create_regime_dependent_features",
      "apply_feature_selection",
      "_remove_highly_correlated_features",
      "_select_by_variance",
      "_calculate_trend",
      "analyze_fusion_results",
      "print_fusion_summary"
    ],
    "docstring": "Phase 2A: Multi-Timeframe Feature Fusion System\nULTRATHINK Implementation - Temporal Scale Integration\n\nImplements sophisticated multi-timeframe analysis used by institutional trading firms:\n- Hierarchical timeframe aggregation (1h, 4h, 1d, 1w)\n- Attention-based timeframe weighting\n- Cross-timeframe signal correlation\n- Regime-dependent timeframe selection\n- Feature importance across temporal scales\n\nDesigned to capture market dynamics at different temporal resolutions\nand enhance predictive power through temporal fusion.",
    "last_modified": 1752521257.8412576,
    "lines_of_code": 709,
    "trading_relevance": 1.0
  },
  "phase2/simulated_onchain_features.py": {
    "path": "phase2/simulated_onchain_features.py",
    "name": "simulated_onchain_features",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "dataclasses.dataclass",
      "glob",
      "os",
      "traceback"
    ],
    "classes": [
      "OnChainConfig",
      "SimulatedOnChainFeatures"
    ],
    "functions": [
      "main",
      "__init__",
      "calculate_all_onchain_features",
      "calculate_mvrv_proxies",
      "calculate_nvt_proxies",
      "calculate_exchange_flow_simulation",
      "calculate_active_address_proxies",
      "calculate_mining_proxies",
      "calculate_whale_activity_simulation",
      "calculate_network_health_proxies",
      "calculate_market_sentiment_proxies",
      "get_onchain_feature_analysis"
    ],
    "docstring": "Phase 2A: Simulated On-Chain Features Engine\nULTRATHINK Implementation - Fundamental Blockchain Metrics\n\nImplements simulated on-chain features as proxies for fundamental blockchain data:\n- MVRV (Market Value to Realized Value) proxies\n- NVT (Network Value to Transactions) proxies\n- Exchange flow simulation\n- Active address proxies\n- Mining difficulty and hash rate proxies\n- Whale activity simulation\n\nDesigned to provide fundamental blockchain insights without requiring real on-chain APIs.",
    "last_modified": 1752520919.9042323,
    "lines_of_code": 581,
    "trading_relevance": 1.0
  },
  "phase2/advanced_technical_indicators.py": {
    "path": "phase2/advanced_technical_indicators.py",
    "name": "advanced_technical_indicators",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "dataclasses.dataclass",
      "glob",
      "os",
      "traceback"
    ],
    "classes": [
      "IndicatorConfig",
      "AdvancedTechnicalIndicators"
    ],
    "functions": [
      "main",
      "__init__",
      "calculate_all_indicators",
      "calculate_ichimoku_cloud",
      "calculate_volume_profile",
      "calculate_obv_analysis",
      "calculate_bollinger_bands",
      "calculate_advanced_macd",
      "calculate_stochastic",
      "calculate_enhanced_rsi",
      "calculate_volatility_indicators",
      "calculate_momentum_indicators",
      "get_feature_importance_analysis"
    ],
    "docstring": "Phase 2A: Advanced Technical Indicators Engine\nULTRATHINK Implementation - Institutional-Grade Technical Analysis\n\nImplements sophisticated technical indicators used by professional trading firms:\n- Ichimoku Cloud System (complete analysis)\n- Volume Profile Analysis\n- On-Balance Volume (OBV) with trends\n- Advanced momentum and volatility indicators\n- Multi-timeframe signal aggregation\n\nDesigned to enhance feature quality and reduce overfitting risk.",
    "last_modified": 1752520773.817288,
    "lines_of_code": 709,
    "trading_relevance": 1.0
  },
  "models/random_forest_model.py": {
    "path": "models/random_forest_model.py",
    "name": "random_forest_model",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "logging",
      "joblib",
      "datetime.datetime",
      "warnings",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.model_selection.GridSearchCV",
      "sklearn.model_selection.TimeSeriesSplit",
      "sklearn.model_selection.cross_val_score",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.metrics.mean_squared_error",
      "sklearn.metrics.mean_absolute_error",
      "sklearn.metrics.r2_score",
      "optuna",
      "utils.config.ModelConfig"
    ],
    "classes": [
      "CryptoRandomForestModel",
      "EnsembleRandomForestModel"
    ],
    "functions": [
      "__init__",
      "create_model",
      "prepare_data",
      "create_targets",
      "train",
      "hyperparameter_tuning",
      "_grid_search_tuning",
      "_optuna_tuning",
      "walk_forward_validation",
      "predict",
      "predict_proba_ranking",
      "_calculate_metrics",
      "get_feature_importance",
      "save_model",
      "load_model",
      "get_model_summary",
      "__init__",
      "train",
      "predict",
      "predict_with_uncertainty",
      "create_targets",
      "prepare_data",
      "is_fitted",
      "hyperparameter_tuning",
      "walk_forward_validation",
      "save_model",
      "load_model",
      "get_model_summary",
      "objective"
    ],
    "docstring": "Random Forest model implementation for cryptocurrency prediction.",
    "last_modified": 1751996951.142832,
    "lines_of_code": 559,
    "trading_relevance": 1.0
  },
  "models/minute_random_forest_model.py": {
    "path": "models/minute_random_forest_model.py",
    "name": "minute_random_forest_model",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "logging",
      "joblib",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.ensemble.ExtraTreesRegressor",
      "sklearn.model_selection.TimeSeriesSplit",
      "sklearn.model_selection.cross_val_score",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.preprocessing.RobustScaler",
      "sklearn.metrics.mean_squared_error",
      "sklearn.metrics.mean_absolute_error",
      "sklearn.metrics.r2_score",
      "sklearn.base.clone",
      "optuna",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "gc",
      "utils.config.ModelConfig",
      "random_forest_model.CryptoRandomForestModel",
      "logging",
      "types.SimpleNamespace"
    ],
    "classes": [
      "MinuteRandomForestModel",
      "EnsembleMinuteRandomForest"
    ],
    "functions": [
      "create_minute_rf_model",
      "create_ensemble_minute_rf",
      "__init__",
      "_get_default_config",
      "_get_default_hf_config",
      "create_multi_horizon_models",
      "_get_horizon_specific_params",
      "prepare_multi_horizon_targets",
      "prepare_optimized_features",
      "_optimize_feature_memory",
      "_fast_fillna",
      "train_multi_horizon_models",
      "_prepare_horizon_data",
      "_select_features_for_horizon",
      "_train_single_model",
      "_update_feature_importance",
      "predict_multi_horizon",
      "predict_with_confidence",
      "online_update",
      "get_feature_importance_summary",
      "get_model_performance_summary",
      "save_models",
      "load_models",
      "get_models_summary",
      "__init__",
      "train",
      "predict_multi_horizon",
      "predict_with_uncertainty",
      "is_fitted",
      "online_update",
      "save_models",
      "load_models"
    ],
    "docstring": "Enhanced Random Forest model optimized for high-frequency minute-level cryptocurrency trading.",
    "last_modified": 1752372089.099239,
    "lines_of_code": 815,
    "trading_relevance": 1.0
  },
  "models/__init__.py": {
    "path": "models/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "random_forest_model.CryptoRandomForestModel",
      "random_forest_model.EnsembleRandomForestModel"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Models module for crypto RF trading system.",
    "last_modified": 1751665190.7219017,
    "lines_of_code": 5,
    "trading_relevance": 0.19067796610169493
  },
  "models/ultra_target_engineering.py": {
    "path": "models/ultra_target_engineering.py",
    "name": "ultra_target_engineering",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "logging",
      "scipy.stats",
      "sklearn.preprocessing.RobustScaler",
      "sklearn.preprocessing.QuantileTransformer",
      "warnings",
      "utils.config.ModelConfig"
    ],
    "classes": [
      "UltraTargetEngineer"
    ],
    "functions": [
      "__init__",
      "_get_price_columns",
      "create_ultra_targets",
      "_add_basic_targets",
      "_add_risk_adjusted_targets",
      "_add_regime_aware_targets",
      "_add_multi_horizon_targets",
      "_add_volatility_scaled_targets",
      "_add_momentum_targets",
      "_add_tail_risk_targets",
      "_add_cross_sectional_targets",
      "_add_meta_targets",
      "_calculate_garman_klass_vol",
      "get_primary_target",
      "prepare_targets_for_training"
    ],
    "docstring": "Ultra-advanced target engineering for maximum prediction accuracy.",
    "last_modified": 1752000961.2128265,
    "lines_of_code": 465,
    "trading_relevance": 1.0
  },
  "features/__init__.py": {
    "path": "features/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "feature_engineering.CryptoFeatureEngine"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Features module for crypto RF trading system.",
    "last_modified": 1751665112.6820369,
    "lines_of_code": 5,
    "trading_relevance": 0.08474576271186442
  },
  "features/feature_engineering.py": {
    "path": "features/feature_engineering.py",
    "name": "feature_engineering",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "logging",
      "scipy.stats",
      "warnings",
      "utils.config.FeatureConfig",
      "sklearn.feature_selection.SelectKBest",
      "sklearn.feature_selection.f_regression",
      "sklearn.ensemble.RandomForestRegressor"
    ],
    "classes": [
      "CryptoFeatureEngine"
    ],
    "functions": [
      "__init__",
      "generate_features",
      "_extract_symbols",
      "_add_technical_indicators",
      "_add_price_features",
      "_add_volume_features",
      "_add_volatility_features",
      "_add_momentum_features",
      "_add_cross_asset_features",
      "_add_temporal_features",
      "_add_market_regime_features",
      "_clean_features",
      "_calculate_rsi",
      "_calculate_macd",
      "_calculate_bollinger_bands",
      "_calculate_atr",
      "_calculate_stochastic",
      "_calculate_williams_r",
      "_calculate_cci",
      "_calculate_obv",
      "_calculate_pvt",
      "_calculate_adx",
      "get_feature_names",
      "select_features"
    ],
    "docstring": "Comprehensive feature engineering for cryptocurrency trading.",
    "last_modified": 1751997876.7663848,
    "lines_of_code": 582,
    "trading_relevance": 1.0
  },
  "features/ultra_feature_engineering.py": {
    "path": "features/ultra_feature_engineering.py",
    "name": "ultra_feature_engineering",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "logging",
      "datetime.datetime",
      "warnings"
    ],
    "classes": [
      "UltraFeatureEngine"
    ],
    "functions": [
      "__init__",
      "_get_default_config",
      "generate_features",
      "_add_price_features",
      "_add_technical_indicators",
      "_add_momentum_features",
      "_add_volatility_features",
      "_add_volume_features",
      "_add_pattern_features",
      "_add_regime_features",
      "_add_microstructure_features",
      "_clean_features",
      "variance_ratio"
    ],
    "docstring": "Ultra Feature Engineering: Enhanced feature generation for UltraThink system.",
    "last_modified": 1752359973.9042468,
    "lines_of_code": 353,
    "trading_relevance": 1.0
  },
  "features/minute_feature_engineering.py": {
    "path": "features/minute_feature_engineering.py",
    "name": "minute_feature_engineering",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "ultra_feature_engineering.UltraFeatureEngine",
      "logging"
    ],
    "classes": [
      "MinuteFeatureEngine"
    ],
    "functions": [
      "create_minute_feature_engine",
      "generate_minute_features_for_symbol",
      "batch_generate_minute_features",
      "__init__",
      "_get_default_config",
      "generate_minute_features",
      "_add_high_frequency_features",
      "_add_microstructure_features",
      "_add_intraday_seasonality_features",
      "_add_volume_profile_features",
      "_add_order_flow_approximation_features",
      "_add_market_regime_minute_features",
      "_add_cross_timeframe_features",
      "_add_minute_momentum_features",
      "_add_volatility_clustering_features",
      "_optimize_memory_usage",
      "_final_feature_cleaning",
      "get_feature_groups"
    ],
    "docstring": "Specialized feature engineering for minute-level cryptocurrency data.",
    "last_modified": 1752367643.4193702,
    "lines_of_code": 603,
    "trading_relevance": 1.0
  },
  "analytics/minute_performance_analytics.py": {
    "path": "analytics/minute_performance_analytics.py",
    "name": "minute_performance_analytics",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "scipy.stats",
      "scipy.stats.jarque_bera",
      "scipy.stats.normaltest",
      "utils.config.Config",
      "matplotlib.pyplot",
      "seaborn",
      "empyrical",
      "logging",
      "types.SimpleNamespace"
    ],
    "classes": [
      "MinutePerformanceAnalytics"
    ],
    "functions": [
      "analyze_minute_portfolio",
      "generate_performance_summary",
      "__init__",
      "_get_default_config",
      "analyze_portfolio_performance",
      "_calculate_basic_metrics",
      "_calculate_risk_metrics",
      "_calculate_hf_metrics",
      "_analyze_intraday_patterns",
      "_analyze_drawdowns",
      "_analyze_trades",
      "_compare_to_benchmark",
      "_perform_statistical_analysis",
      "_analyze_rolling_performance",
      "_analyze_performance_attribution",
      "_calculate_beta",
      "generate_performance_report"
    ],
    "docstring": "Comprehensive performance analytics optimized for minute-level cryptocurrency trading.",
    "last_modified": 1752372887.3859248,
    "lines_of_code": 902,
    "trading_relevance": 1.0
  },
  ".claude/benchmark_tree_sitter.py": {
    "path": ".claude/benchmark_tree_sitter.py",
    "name": "benchmark_tree_sitter",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "time",
      "sys",
      "pathlib.Path",
      "tree_sitter_chunker.TreeSitterSemanticChunker"
    ],
    "classes": [],
    "functions": [
      "benchmark_parsing_performance"
    ],
    "docstring": "Performance benchmark: AST vs Tree-sitter parsing\nCompare parsing performance and chunk quality between methods",
    "last_modified": 1752565373.3874156,
    "lines_of_code": 154,
    "trading_relevance": 1.0
  },
  ".claude/cgrag/cgrag_integration.py": {
    "path": ".claude/cgrag/cgrag_integration.py",
    "name": "cgrag_integration",
    "type": "trading",
    "priority": "MEDIUM",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "sys",
      "cgrag_orchestrator.CGRAGOrchestrator",
      "cgrag_orchestrator.CGRAGRetrievalResult",
      "context_api.UltraThinkContextAPI",
      "semantic_integration_manager.SemanticIntegrationManager",
      "semantic_integration_manager.SemanticContextBundle",
      "cgrag.coarse_retrieval.TradingQueryAnalyzer"
    ],
    "classes": [
      "UnifiedRetrievalResult",
      "CGRAGIntegrationMetrics",
      "RetrievalMethodSelector",
      "PerformanceComparator",
      "CGRAGIntegrationManager"
    ],
    "functions": [
      "__init__",
      "select_method",
      "__init__",
      "compare_methods",
      "__init__",
      "unified_retrieve",
      "_create_hybrid_context",
      "_update_performance_history",
      "get_integration_metrics",
      "optimize_integration",
      "benchmark_methods"
    ],
    "docstring": "ULTRATHINK CGRAG Integration Layer\nSeamless integration of CGRAG with existing context management system\n\nPhilosophy: Enhance existing systems without disruption\nPerformance: Maintain compatibility while adding CGRAG intelligence\nIntelligence: Unified interface for both legacy and CGRAG retrieval",
    "last_modified": 1752543699.3871796,
    "lines_of_code": 518,
    "trading_relevance": 0.5918079096045198
  },
  ".claude/cgrag/cgrag_orchestrator.py": {
    "path": ".claude/cgrag/cgrag_orchestrator.py",
    "name": "cgrag_orchestrator",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "collections.defaultdict",
      "sys",
      "coarse_retrieval.CoarseRetrievalEngine",
      "coarse_retrieval.CoarseRetrievalResult",
      "coarse_retrieval.TradingQueryAnalyzer",
      "fine_retrieval.FineRetrievalEngine",
      "fine_retrieval.FineRetrievalResult",
      "fine_retrieval.FineRetrievalTarget",
      "semantic_integration_manager.SemanticIntegrationManager",
      "semantic_integration_manager.SemanticIntegrationManager"
    ],
    "classes": [
      "CGRAGRetrievalResult",
      "CGRAGSystemMetrics",
      "StageCoordinator",
      "ContextFormatter",
      "CGRAGOrchestrator"
    ],
    "functions": [
      "__init__",
      "should_bypass_fine_stage",
      "optimize_stage_parameters",
      "coordinate_stage_transition",
      "__init__",
      "format_context",
      "_format_explanation_context",
      "_format_implementation_context",
      "_format_optimization_context",
      "_format_general_context",
      "__init__",
      "retrieve_context",
      "get_system_metrics",
      "optimize_system_performance"
    ],
    "docstring": "ULTRATHINK CGRAG Orchestrator\nIntelligent coordination of two-stage retrieval system\n\nPhilosophy: Optimal orchestration of coarse \u2192 fine retrieval for maximum precision\nPerformance: < 100ms end-to-end with intelligent stage optimization\nIntelligence: Adaptive routing and optimization based on query characteristics",
    "last_modified": 1752543608.569559,
    "lines_of_code": 579,
    "trading_relevance": 1.0
  },
  ".claude/cgrag/fine_retrieval.py": {
    "path": ".claude/cgrag/fine_retrieval.py",
    "name": "fine_retrieval",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "re",
      "ast",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "collections.defaultdict",
      "sys",
      "coarse_retrieval.CoarseRetrievalCandidate",
      "coarse_retrieval.CoarseRetrievalResult",
      "coarse_retrieval.CoarseRetrievalEngine",
      "tree_sitter_chunker.SemanticChunk",
      "chunk_classifier.ChunkClassification",
      "coarse_retrieval.TradingQueryAnalyzer"
    ],
    "classes": [
      "FineRetrievalTarget",
      "FineRetrievalResult",
      "CodePatternAnalyzer",
      "PrecisionTargeting",
      "FineRetrievalEngine"
    ],
    "functions": [
      "__init__",
      "analyze_code_patterns",
      "_select_relevant_extractors",
      "__init__",
      "extract_precise_targets",
      "_create_target_from_pattern",
      "_extract_query_specific_targets",
      "_create_exact_match_target",
      "_extract_key_variables",
      "_extract_dependencies",
      "_identify_complexity",
      "_calculate_initial_relevance",
      "_calculate_precision_score",
      "_analyze_trading_relevance",
      "__init__",
      "retrieve_fine_targets",
      "_load_chunk_content",
      "_assess_content_depth",
      "_calculate_token_efficiency",
      "_calculate_final_confidence",
      "_determine_strategy_used",
      "_suggest_optimizations",
      "get_fine_retrieval_stats"
    ],
    "docstring": "ULTRATHINK CGRAG Fine Retrieval Engine\nSecond stage of two-stage intelligent context retrieval\n\nPhilosophy: Precision targeting for exact context needed\nPerformance: < 20ms fine filtering with line-level precision\nIntelligence: Deep code analysis with contextual understanding",
    "last_modified": 1752543519.597322,
    "lines_of_code": 738,
    "trading_relevance": 1.0
  },
  ".claude/cgrag/coarse_retrieval.py": {
    "path": ".claude/cgrag/coarse_retrieval.py",
    "name": "coarse_retrieval",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "re",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "collections.defaultdict",
      "sys",
      "semantic_integration_manager.SemanticIntegrationManager",
      "semantic_integration_manager.SemanticContextBundle",
      "tree_sitter_chunker.SemanticChunk",
      "tree_sitter_chunker.SemanticModuleAnalysis",
      "chunk_classifier.ChunkClassification",
      "semantic_integration_manager.SemanticIntegrationManager"
    ],
    "classes": [
      "CoarseRetrievalCandidate",
      "CoarseRetrievalResult",
      "TradingQueryAnalyzer",
      "CoarseRetrievalEngine"
    ],
    "functions": [
      "__init__",
      "analyze_query",
      "__init__",
      "retrieve_coarse_candidates",
      "_find_semantic_candidates",
      "_find_keyword_candidates",
      "_find_workflow_candidates",
      "_find_classification_candidates",
      "_deduplicate_and_score",
      "_infer_trading_stage",
      "_find_chunk_by_id",
      "_get_content_preview",
      "_identify_trading_workflows",
      "_calculate_coarse_confidence",
      "_generate_fine_stage_recommendations",
      "get_retrieval_stats"
    ],
    "docstring": "ULTRATHINK CGRAG Coarse Retrieval Engine\nFirst stage of two-stage intelligent context retrieval\n\nPhilosophy: Cast a wide net to capture all potentially relevant context\nPerformance: < 50ms coarse filtering across 111 modules\nIntelligence: Trading-aware broad filtering with semantic understanding",
    "last_modified": 1752543403.4836648,
    "lines_of_code": 616,
    "trading_relevance": 1.0
  },
  ".claude/scripts/comprehensive_test_suite.py": {
    "path": ".claude/scripts/comprehensive_test_suite.py",
    "name": "comprehensive_test_suite",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "unittest",
      "subprocess",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "datetime.datetime",
      "sys",
      "context_loader.UltraThinkContextLoader",
      "enhanced_template_generator.EnhancedTemplateGenerator",
      "fixed_advanced_retrieval.UltraThinkAdvancedInterface",
      "context_api.UltraThinkContextAPI",
      "re"
    ],
    "classes": [
      "UltraThinkSystemTests"
    ],
    "functions": [
      "run_comprehensive_tests",
      "setUpClass",
      "test_01_context_loader_performance",
      "test_02_template_generator_functionality",
      "test_03_advanced_retrieval_intelligence",
      "test_04_context_api_operations",
      "test_05_live_trading_integration",
      "test_06_dependency_mapping_accuracy",
      "test_07_system_optimization_and_caching",
      "test_08_comprehensive_system_validation",
      "tearDownClass"
    ],
    "docstring": "ULTRATHINK Comprehensive Test Suite\nComplete testing framework for context management system\n\nPhilosophy: Zero-tolerance for failure - all systems must perform flawlessly\nPerformance: < 500ms full system validation with comprehensive coverage\nIntelligence: Validates all 8 subsystems with live trading integration",
    "last_modified": 1752542454.2991667,
    "lines_of_code": 487,
    "trading_relevance": 1.0
  },
  ".claude/scripts/context_loader.py": {
    "path": ".claude/scripts/context_loader.py",
    "name": "context_loader",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Union",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "ast",
      "re"
    ],
    "classes": [
      "ModuleInfo",
      "ContextBundle",
      "TradingSystemModuleAnalyzer",
      "UltraThinkContextLoader"
    ],
    "functions": [
      "__init__",
      "analyze_module",
      "_extract_imports",
      "_calculate_trading_relevance",
      "_determine_module_type",
      "_determine_priority",
      "_extract_dependencies",
      "__init__",
      "_build_module_graph",
      "_cache_module_graph",
      "_load_existing_contexts",
      "get_context_for_module",
      "get_context_for_query",
      "_get_primary_context",
      "_get_related_contexts",
      "_resolve_dependencies",
      "_analyze_query_intent",
      "_get_performance_metrics",
      "_update_performance_metrics",
      "_create_fallback_context",
      "_load_file_content",
      "get_system_performance"
    ],
    "docstring": "ULTRATHINK Dynamic Context Loading Framework\nOptimized for institutional-grade cryptocurrency trading systems\n\nPhilosophy: Anticipate developer needs with intelligent context delivery\nPerformance: < 500ms context loading for any query\nIntelligence: Trading-system aware context selection",
    "last_modified": 1752540802.0681782,
    "lines_of_code": 565,
    "trading_relevance": 1.0
  },
  ".claude/scripts/fixed_advanced_retrieval.py": {
    "path": ".claude/scripts/fixed_advanced_retrieval.py",
    "name": "fixed_advanced_retrieval",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "networkx",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "datetime.datetime",
      "collections.defaultdict",
      "collections.deque",
      "re",
      "sys",
      "context_loader.UltraThinkContextLoader",
      "context_loader.ModuleInfo",
      "context_loader.ContextBundle"
    ],
    "classes": [
      "AdvancedRetrievalResult",
      "DependencyIntelligenceEngine",
      "AdvancedContextRetriever",
      "UltraThinkAdvancedInterface"
    ],
    "functions": [
      "__init__",
      "_build_dependency_graph",
      "_add_explicit_dependencies",
      "_add_trading_dependencies",
      "_add_workflow_dependencies",
      "get_dependency_chain",
      "get_related_modules",
      "__init__",
      "retrieve_intelligent_context",
      "retrieve_module_with_dependencies",
      "_analyze_query",
      "_calculate_confidence",
      "_create_error_result",
      "get_performance_stats",
      "__init__",
      "ask",
      "analyze_module",
      "_format_response",
      "get_session_summary"
    ],
    "docstring": "ULTRATHINK Fixed Advanced Retrieval System\nCorrected dependency mapping with proper module path handling\n\nPhilosophy: Anticipatory intelligence with robust error handling\nPerformance: < 100ms retrieval with perfect dependency resolution\nIntelligence: 95%+ query intent recognition with contextual understanding",
    "last_modified": 1752541943.0238287,
    "lines_of_code": 576,
    "trading_relevance": 1.0
  },
  ".claude/scripts/template_generator.py": {
    "path": ".claude/scripts/template_generator.py",
    "name": "template_generator",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "re",
      "ast",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Any",
      "typing.Tuple",
      "datetime.datetime",
      "dataclasses.dataclass",
      "sys",
      "context_loader.UltraThinkContextLoader",
      "context_loader.ModuleInfo"
    ],
    "classes": [
      "TemplateVariable",
      "TradingSystemTemplateEngine"
    ],
    "functions": [
      "__init__",
      "generate_context_for_module",
      "_map_module_type_to_template",
      "_extract_module_variables",
      "_load_module_content",
      "_populate_template",
      "extract_module_name",
      "extract_overview",
      "extract_primary_class",
      "extract_key_methods",
      "_get_method_description",
      "_generate_method_description",
      "extract_dependencies",
      "extract_critical_files",
      "extract_usage_examples",
      "extract_config_schema",
      "get_module_path",
      "get_generation_date",
      "extract_strategy_type"
    ],
    "docstring": "ULTRATHINK Template Generation Engine\nIntelligent template instantiation for trading system modules\n\nPhilosophy: Transform static templates into intelligent, context-aware documentation\nPerformance: < 200ms template generation for any module\nIntelligence: 95%+ accurate template variable population",
    "last_modified": 1752541267.1690154,
    "lines_of_code": 506,
    "trading_relevance": 1.0
  },
  ".claude/scripts/enhanced_template_generator.py": {
    "path": ".claude/scripts/enhanced_template_generator.py",
    "name": "enhanced_template_generator",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "re",
      "ast",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Any",
      "datetime.datetime",
      "sys",
      "context_loader.UltraThinkContextLoader",
      "context_loader.ModuleInfo"
    ],
    "classes": [
      "EnhancedTemplateGenerator"
    ],
    "functions": [
      "__init__",
      "generate_context_for_module",
      "_load_module_content",
      "_generate_all_variables",
      "_get_module_display_name",
      "_get_overview_description",
      "_get_trading_variables",
      "_get_risk_variables",
      "_get_execution_variables",
      "_get_common_variables",
      "_detect_strategy_type",
      "_detect_trading_approach",
      "_get_primary_class",
      "_format_methods_list",
      "_generate_method_description",
      "_get_performance_info",
      "_get_signal_logic",
      "_get_entry_conditions",
      "_get_exit_conditions",
      "_get_position_sizing",
      "_get_risk_controls",
      "_get_strategy_parameters",
      "_get_active_status",
      "_get_current_performance",
      "_get_critical_files",
      "_get_integration_points",
      "_format_dependencies_list",
      "_get_testing_framework",
      "_get_known_issues",
      "_get_usage_examples",
      "_get_config_schema",
      "_populate_template_completely",
      "_get_default_value",
      "_detect_risk_approach",
      "_get_risk_models",
      "_get_position_limits",
      "_get_risk_metrics_description",
      "_get_stop_loss_config",
      "_get_advanced_controls",
      "_get_var_method",
      "_get_cvar_method",
      "_get_kelly_implementation",
      "_get_drawdown_control",
      "_get_risk_config_schema",
      "_get_risk_usage_examples",
      "_detect_execution_type",
      "_get_execution_method",
      "_get_order_management",
      "_get_session_status",
      "_get_active_positions",
      "_get_trade_count",
      "_get_live_session_info",
      "_get_session_parameters",
      "_get_execution_config_schema",
      "_get_execution_usage_examples",
      "_get_general_variables",
      "_get_data_variables",
      "_get_analytics_variables",
      "_get_ml_variables"
    ],
    "docstring": "ULTRATHINK Enhanced Template Generator \nFixed variable population with intelligent content extraction\n\nPhilosophy: Perfect template instantiation with zero placeholders\nPerformance: < 200ms fully populated template generation\nIntelligence: 100% variable population success rate",
    "last_modified": 1752542470.3945436,
    "lines_of_code": 825,
    "trading_relevance": 1.0
  },
  ".claude/scripts/advanced_retrieval_system.py": {
    "path": ".claude/scripts/advanced_retrieval_system.py",
    "name": "advanced_retrieval_system",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "networkx",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "collections.defaultdict",
      "collections.deque",
      "re",
      "sys",
      "context_loader.UltraThinkContextLoader",
      "context_loader.ModuleInfo",
      "context_loader.ContextBundle",
      "enhanced_template_generator.EnhancedTemplateGenerator"
    ],
    "classes": [
      "DependencyNode",
      "RetrievalContext",
      "DependencyGraphBuilder",
      "AdvancedRetrievalEngine",
      "UltraThinkAdvancedRetrieval"
    ],
    "functions": [
      "__init__",
      "_build_comprehensive_dependency_graph",
      "_add_implicit_trading_dependencies",
      "_add_implicit_deps",
      "_add_critical_module_deps",
      "_add_usage_based_dependencies",
      "get_dependency_chain",
      "get_reverse_dependencies",
      "find_related_modules",
      "__init__",
      "retrieve_comprehensive_context",
      "retrieve_module_context_with_deps",
      "_analyze_query_for_modules",
      "_is_trading_keyword",
      "_build_context_package",
      "_calculate_confidence_score",
      "_create_error_context",
      "_update_usage_statistics",
      "get_retrieval_analytics",
      "optimize_cache",
      "__init__",
      "ask_intelligent",
      "get_module_with_dependencies",
      "analyze_trading_workflow",
      "_format_retrieval_response",
      "_format_workflow_response",
      "get_session_summary"
    ],
    "docstring": "ULTRATHINK Advanced Retrieval System\nIntelligent context retrieval with comprehensive dependency mapping\n\nPhilosophy: Anticipatory intelligence - deliver context before it's needed\nPerformance: < 100ms retrieval with perfect dependency resolution\nIntelligence: 95%+ query intent recognition with contextual understanding",
    "last_modified": 1752541823.950094,
    "lines_of_code": 738,
    "trading_relevance": 1.0
  },
  ".claude/scripts/context_manager.py": {
    "path": ".claude/scripts/context_manager.py",
    "name": "context_manager",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Union",
      "datetime.datetime",
      "time",
      "context_loader.UltraThinkContextLoader",
      "context_loader.ContextBundle",
      "sys"
    ],
    "classes": [
      "ContextManager",
      "TradingSystemContextInterface"
    ],
    "functions": [
      "__init__",
      "ask",
      "get_module_context",
      "search_modules",
      "get_trading_system_overview",
      "get_live_trading_status",
      "get_module_dependencies",
      "optimize_context",
      "get_session_analytics",
      "_format_context_response",
      "_track_query",
      "__init__",
      "kelly_criterion_help",
      "risk_management_overview",
      "ensemble_model_help",
      "live_trading_debug",
      "strategy_development_guide",
      "performance_analysis_help",
      "data_pipeline_debug"
    ],
    "docstring": "ULTRATHINK Context Management Interface\nHigh-level API for intelligent context operations\n\nDesign Philosophy: Make complex context operations feel effortless\nPerformance Goal: < 100ms for any context operation\nIntelligence Goal: 95%+ query intent recognition",
    "last_modified": 1752540860.2318487,
    "lines_of_code": 333,
    "trading_relevance": 1.0
  },
  ".claude/scripts/context_api.py": {
    "path": ".claude/scripts/context_api.py",
    "name": "context_api",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Any",
      "datetime.datetime",
      "sys",
      "context_loader.UltraThinkContextLoader",
      "enhanced_template_generator.EnhancedTemplateGenerator",
      "fixed_advanced_retrieval.UltraThinkAdvancedInterface",
      "sys"
    ],
    "classes": [
      "UltraThinkContextAPI"
    ],
    "functions": [
      "__init__",
      "ask",
      "get_module_context",
      "search_modules",
      "get_system_overview",
      "get_trading_status",
      "get_dependency_analysis",
      "generate_documentation",
      "optimize_system",
      "get_api_stats",
      "_execute_api_call",
      "execute",
      "execute",
      "execute",
      "execute",
      "execute",
      "execute",
      "execute"
    ],
    "docstring": "ULTRATHINK Context API - Unified Interface\nProduction-ready API for all context management operations\n\nPhilosophy: Single interface for all context intelligence\nPerformance: Sub-100ms for all operations\nUsability: Natural language interface with comprehensive responses",
    "last_modified": 1752542009.5656736,
    "lines_of_code": 445,
    "trading_relevance": 1.0
  },
  ".claude/scripts/test_context_system.py": {
    "path": ".claude/scripts/test_context_system.py",
    "name": "test_context_system",
    "type": "trading",
    "priority": "MEDIUM",
    "dependencies": [],
    "imports": [
      "sys",
      "os",
      "pathlib.Path",
      "context_loader.UltraThinkContextLoader",
      "context_manager.ContextManager"
    ],
    "classes": [],
    "functions": [
      "test_context_system",
      "demonstrate_trading_queries"
    ],
    "docstring": "ULTRATHINK Context System Testing & Validation\nWeek 2 Day 8-9: Validate dynamic context loading implementation",
    "last_modified": 1752540913.356565,
    "lines_of_code": 153,
    "trading_relevance": 0.4929378531073446
  },
  ".claude/semantic/semantic_graph.py": {
    "path": ".claude/semantic/semantic_graph.py",
    "name": "semantic_graph",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "networkx",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "collections.defaultdict",
      "collections.deque",
      "sys",
      "tree_sitter_chunker.SemanticChunk",
      "tree_sitter_chunker.SemanticModuleAnalysis",
      "tree_sitter_chunker.TreeSitterSemanticChunker"
    ],
    "classes": [
      "SemanticRelationship",
      "SemanticGraphMetrics",
      "TradingWorkflowAnalyzer",
      "SemanticGraphBuilder"
    ],
    "functions": [
      "__init__",
      "analyze_trading_workflows",
      "detect_critical_paths",
      "__init__",
      "build_semantic_graph",
      "_add_chunk_nodes",
      "_discover_semantic_relationships",
      "_analyze_chunk_relationship",
      "_is_trading_workflow_related",
      "_add_relationship_edges",
      "_add_trading_workflow_edges",
      "_add_module_relationships",
      "get_semantic_metrics",
      "get_chunk_neighbors",
      "get_trading_critical_chunks",
      "export_graph_data"
    ],
    "docstring": "ULTRATHINK Semantic Graph Builder\nEnhanced dependency mapping with semantic relationships\n\nPhilosophy: Understanding code relationships at semantic level\nPerformance: < 5ms graph building for 107 modules\nIntelligence: Trading-aware relationship detection beyond imports",
    "last_modified": 1752542977.3779,
    "lines_of_code": 499,
    "trading_relevance": 1.0
  },
  ".claude/semantic/chunk_classifier.py": {
    "path": ".claude/semantic/chunk_classifier.py",
    "name": "chunk_classifier",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "re",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "collections.defaultdict",
      "sys",
      "tree_sitter_chunker.SemanticChunk",
      "tree_sitter_chunker.SemanticModuleAnalysis",
      "tree_sitter_chunker.TreeSitterSemanticChunker"
    ],
    "classes": [
      "ChunkClassification",
      "ClassificationMetrics",
      "TradingDomainClassifier",
      "ChunkClassificationEngine"
    ],
    "functions": [
      "__init__",
      "classify_chunk",
      "_classify_primary_category",
      "_classify_secondary_categories",
      "_calculate_priority_score",
      "_calculate_context_importance",
      "_determine_trading_stage",
      "_assess_complexity_level",
      "_estimate_dependency_rank",
      "_estimate_usage_frequency",
      "_calculate_classification_confidence",
      "__init__",
      "classify_chunks",
      "get_classification_metrics",
      "get_priority_chunks",
      "get_chunks_by_category",
      "get_chunks_by_trading_stage",
      "export_classifications"
    ],
    "docstring": "ULTRATHINK Chunk Classification System\nTrading-specific semantic chunk classification and prioritization\n\nPhilosophy: Intelligent chunk categorization for trading development\nPerformance: < 1ms chunk classification with 95% accuracy\nIntelligence: Trading domain expertise for optimal context selection",
    "last_modified": 1752543074.9711597,
    "lines_of_code": 659,
    "trading_relevance": 1.0
  },
  ".claude/semantic/tree_sitter_chunker.py": {
    "path": ".claude/semantic/tree_sitter_chunker.py",
    "name": "tree_sitter_chunker",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "ast",
      "re",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "tree_sitter",
      "tree_sitter.Language",
      "tree_sitter.Parser",
      "tree_sitter_python",
      "tree_sitter.Language",
      "tree_sitter.Parser"
    ],
    "classes": [
      "SemanticChunk",
      "SemanticModuleAnalysis",
      "TradingPatternDetector",
      "TreeSitterSemanticChunker",
      "EnhancedASTChunker"
    ],
    "functions": [
      "__init__",
      "detect_patterns",
      "__init__",
      "_init_enhanced_ast_parser",
      "_init_tree_sitter_queries",
      "chunk_module",
      "_tree_sitter_chunk",
      "_extract_functions",
      "_extract_classes",
      "_extract_methods",
      "_create_chunk_from_node",
      "_extract_docstring",
      "_extract_dependencies",
      "_extract_method_ids",
      "_calculate_complexity",
      "_calculate_trading_relevance",
      "_enhance_chunk_metadata",
      "_enhanced_ast_chunk",
      "_build_semantic_graph",
      "_flatten_tags",
      "_extract_trading_patterns",
      "_extract_risk_patterns",
      "_extract_ml_patterns",
      "_calculate_complexity_metrics",
      "_generate_semantic_summary",
      "__init__",
      "chunk_content",
      "_create_function_chunk",
      "_create_class_chunk",
      "_create_fallback_chunk",
      "_calculate_trading_relevance",
      "_determine_chunk_type",
      "_extract_dependencies",
      "count_nodes"
    ],
    "docstring": "ULTRATHINK Semantic Code Chunking with Tree-sitter\nAdvanced code parsing for intelligent context generation\n\nPhilosophy: Code understanding at semantic level, not just syntactic\nPerformance: < 2ms semantic parsing per module (vs 0.3ms AST)\nIntelligence: Trading-aware chunking optimized for crypto trading systems",
    "last_modified": 1752565301.7080345,
    "lines_of_code": 952,
    "trading_relevance": 1.0
  },
  ".claude/semantic/semantic_integration_manager.py": {
    "path": ".claude/semantic/semantic_integration_manager.py",
    "name": "semantic_integration_manager",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "typing.Any",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "sys",
      "tree_sitter_chunker.TreeSitterSemanticChunker",
      "tree_sitter_chunker.SemanticChunk",
      "tree_sitter_chunker.SemanticModuleAnalysis",
      "semantic_graph.SemanticGraphBuilder",
      "semantic_graph.SemanticGraphMetrics",
      "chunk_classifier.ChunkClassificationEngine",
      "chunk_classifier.ChunkClassification",
      "chunk_classifier.ClassificationMetrics",
      "context_loader.UltraThinkContextLoader",
      "context_loader.ModuleInfo",
      "context_loader.ContextBundle"
    ],
    "classes": [
      "SemanticContextBundle",
      "SemanticSystemMetrics",
      "SemanticIntegrationManager"
    ],
    "functions": [
      "__init__",
      "analyze_project_semantics",
      "get_semantic_context",
      "_find_relevant_chunks",
      "_get_chunk_classifications",
      "_build_chunk_relationships",
      "_generate_workflow_context",
      "_load_chunk_content",
      "_generate_semantic_summary",
      "_calculate_semantic_confidence",
      "_gather_semantic_metrics",
      "get_system_metrics",
      "integrate_with_existing_api",
      "export_semantic_data"
    ],
    "docstring": "ULTRATHINK Semantic Integration Manager\nCoordinates all semantic analysis components with existing context system\n\nPhilosophy: Seamless integration of semantic intelligence with Week 2 framework\nPerformance: Maintain < 10ms impact on existing systems\nIntelligence: Enhanced context delivery through semantic understanding",
    "last_modified": 1752543176.0370324,
    "lines_of_code": 483,
    "trading_relevance": 1.0
  },
  ".claude/workflows/workflow_template_engine.py": {
    "path": ".claude/workflows/workflow_template_engine.py",
    "name": "workflow_template_engine",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "json",
      "time",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Any",
      "typing.Tuple",
      "dataclasses.dataclass",
      "dataclasses.asdict",
      "datetime.datetime",
      "enum.Enum",
      "sys",
      "cgrag.cgrag_integration.CGRAGIntegrationManager",
      "re"
    ],
    "classes": [
      "WorkflowType",
      "WorkflowComplexity",
      "WorkflowStep",
      "WorkflowTemplate",
      "WorkflowContextAnalyzer",
      "WorkflowTemplateGenerator",
      "WorkflowTemplateEngine"
    ],
    "functions": [
      "__init__",
      "analyze_workflow_context",
      "_find_existing_implementations",
      "_analyze_dependencies",
      "_extract_performance_metrics",
      "_assess_complexity",
      "_recommend_approach",
      "_extract_location_from_context",
      "_estimate_complexity",
      "__init__",
      "generate_workflow_template",
      "_generate_kelly_workflow",
      "_generate_ensemble_workflow",
      "_generate_live_deployment_workflow",
      "_generate_risk_management_workflow",
      "_generate_backtesting_workflow",
      "_generate_generic_workflow",
      "__init__",
      "generate_template",
      "save_template",
      "list_templates",
      "load_template"
    ],
    "docstring": "ULTRATHINK Trading Workflow Template Engine\nIntelligent workflow templates leveraging CGRAG context management\n\nPhilosophy: Automate common trading workflows with intelligent context awareness\nPerformance: < 100ms template generation with real-time adaptation\nIntelligence: CGRAG-powered context retrieval for workflow optimization",
    "last_modified": 1752565679.2789042,
    "lines_of_code": 990,
    "trading_relevance": 1.0
  },
  "backtesting/backtest_engine.py": {
    "path": "backtesting/backtest_engine.py",
    "name": "backtest_engine",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "utils.config.BacktestConfig",
      "utils.config.Config",
      "strategies.long_short_strategy.PortfolioManager",
      "models.random_forest_model.CryptoRandomForestModel",
      "empyrical",
      "json"
    ],
    "classes": [
      "CryptoBacktestEngine"
    ],
    "functions": [
      "run_walk_forward_backtest",
      "__init__",
      "run_backtest",
      "_prepare_backtest_data",
      "_calculate_performance_metrics",
      "calculate_benchmark_comparison",
      "generate_detailed_report",
      "_calculate_portfolio_statistics",
      "_calculate_risk_metrics",
      "_analyze_trades",
      "_calculate_monthly_returns",
      "_calculate_turnover",
      "save_results",
      "_make_serializable"
    ],
    "docstring": "Comprehensive backtesting engine for cryptocurrency trading strategies.",
    "last_modified": 1751697325.739725,
    "lines_of_code": 455,
    "trading_relevance": 1.0
  },
  "backtesting/__init__.py": {
    "path": "backtesting/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "backtest_engine.CryptoBacktestEngine",
      "backtest_engine.run_walk_forward_backtest"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Backtesting module for crypto RF trading system.",
    "last_modified": 1751665350.7416277,
    "lines_of_code": 5,
    "trading_relevance": 0.0
  },
  "backtesting/minute_backtest_engine.py": {
    "path": "backtesting/minute_backtest_engine.py",
    "name": "minute_backtest_engine",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "gc",
      "multiprocessing",
      "utils.config.BacktestConfig",
      "utils.config.Config",
      "models.minute_random_forest_model.MinuteRandomForestModel",
      "data.minute_data_manager.MinuteDataManager",
      "features.minute_feature_engineering.MinuteFeatureEngine",
      "numba.jit",
      "numba.cuda",
      "empyrical",
      "logging",
      "types.SimpleNamespace"
    ],
    "classes": [
      "MinuteBacktestEngine",
      "FastPortfolioTracker",
      "DummyModel"
    ],
    "functions": [
      "fast_returns_calculation",
      "fast_drawdown_calculation",
      "fast_moving_average",
      "create_minute_backtest_engine",
      "run_6_month_minute_backtest",
      "__init__",
      "_get_default_config",
      "run_ultra_fast_backtest",
      "_prepare_aligned_data",
      "_process_backtest_batch",
      "_generate_batch_features",
      "_generate_fast_signals",
      "_compile_batch_results",
      "_calculate_ultra_fast_metrics",
      "run_parallel_backtest",
      "_process_parallel_chunk",
      "_combine_parallel_results",
      "__init__",
      "update_portfolio",
      "_execute_trade",
      "_update_portfolio_value",
      "get_portfolio_history",
      "get_trades_history",
      "jit",
      "predict_multi_horizon",
      "decorator"
    ],
    "docstring": "Ultra-fast backtesting engine optimized for minute-level cryptocurrency trading.",
    "last_modified": 1752372881.7578335,
    "lines_of_code": 836,
    "trading_relevance": 1.0
  },
  "strategies/long_short_strategy.py": {
    "path": "strategies/long_short_strategy.py",
    "name": "long_short_strategy",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "utils.config.StrategyConfig"
    ],
    "classes": [
      "LongShortStrategy",
      "PortfolioManager"
    ],
    "functions": [
      "__init__",
      "generate_signals",
      "calculate_position_sizes",
      "execute_trades",
      "apply_risk_management",
      "should_rebalance",
      "calculate_portfolio_value",
      "calculate_drawdown",
      "check_risk_limits",
      "get_portfolio_summary",
      "get_performance_metrics",
      "__init__",
      "update_portfolio",
      "get_portfolio_dataframe",
      "get_trades_dataframe",
      "get_summary"
    ],
    "docstring": "Long/short trading strategy implementation.",
    "last_modified": 1751697319.2012746,
    "lines_of_code": 441,
    "trading_relevance": 1.0
  },
  "strategies/__init__.py": {
    "path": "strategies/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "long_short_strategy.LongShortStrategy",
      "long_short_strategy.PortfolioManager"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Strategies module for crypto RF trading system.",
    "last_modified": 1751665277.2903578,
    "lines_of_code": 5,
    "trading_relevance": 0.14124293785310735
  },
  "strategies/minute_trading_strategies.py": {
    "path": "strategies/minute_trading_strategies.py",
    "name": "minute_trading_strategies",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "logging",
      "datetime.datetime",
      "datetime.timedelta",
      "enum.Enum",
      "warnings",
      "utils.config.StrategyConfig",
      "models.minute_random_forest_model.MinuteRandomForestModel",
      "logging"
    ],
    "classes": [
      "MarketRegime",
      "MinuteMomentumStrategy",
      "MinuteMeanReversionStrategy",
      "MinuteBreakoutStrategy",
      "MinuteStrategyEnsemble"
    ],
    "functions": [
      "create_minute_momentum_strategy",
      "create_minute_strategy_ensemble",
      "backtest_strategy_performance",
      "__init__",
      "_get_default_config",
      "generate_signals",
      "_get_prediction_signals",
      "_get_momentum_signals",
      "_get_volatility_adjustment",
      "_apply_risk_management",
      "update_positions",
      "__init__",
      "_get_default_config",
      "generate_signals",
      "_get_mean_reversion_signals",
      "_get_contrarian_prediction_signals",
      "__init__",
      "_get_default_config",
      "generate_signals",
      "_get_breakout_signals",
      "_get_volume_confirmation",
      "_get_prediction_confirmation",
      "__init__",
      "generate_signals",
      "_apply_ensemble_risk_management",
      "update_strategy_weights"
    ],
    "docstring": "High-frequency trading strategies optimized for minute-level cryptocurrency trading.",
    "last_modified": 1752372370.102242,
    "lines_of_code": 791,
    "trading_relevance": 1.0
  },
  "data/yfinance_fetcher.py": {
    "path": "data/yfinance_fetcher.py",
    "name": "yfinance_fetcher",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "logging",
      "os",
      "time",
      "utils.config.DataConfig",
      "utils.config.get_default_config"
    ],
    "classes": [
      "YFinanceCryptoFetcher"
    ],
    "functions": [
      "test_yfinance_fetcher",
      "__init__",
      "get_yf_ticker",
      "fetch_crypto_data",
      "_process_yfinance_data",
      "fetch_all_symbols",
      "fetch_batch_data",
      "get_latest_prices",
      "combine_data",
      "get_clean_data"
    ],
    "docstring": "yfinance-based cryptocurrency data fetcher for free real-time and historical data.",
    "last_modified": 1751999688.6915457,
    "lines_of_code": 371,
    "trading_relevance": 1.0
  },
  "data/__init__.py": {
    "path": "data/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "data_fetcher.CryptoDataFetcher"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Data module for crypto RF trading system.",
    "last_modified": 1751665008.7689738,
    "lines_of_code": 5,
    "trading_relevance": 0.11864406779661017
  },
  "data/data_fetcher.py": {
    "path": "data/data_fetcher.py",
    "name": "data_fetcher",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "asyncio",
      "aiohttp",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "logging",
      "json",
      "os",
      "time",
      "pathlib.Path",
      "pickle",
      "utils.config.Config",
      "utils.config.DataConfig",
      "utils.config.get_default_config"
    ],
    "classes": [
      "CryptoDataFetcher"
    ],
    "functions": [
      "__init__",
      "_get_cache_path",
      "_is_cache_valid",
      "_save_to_cache",
      "_load_from_cache",
      "_parse_coingecko_response",
      "_parse_coinmarketcap_response",
      "combine_data",
      "get_clean_data"
    ],
    "docstring": "Multi-source cryptocurrency data fetcher.",
    "last_modified": 1751697330.979122,
    "lines_of_code": 387,
    "trading_relevance": 1.0
  },
  "data/minute_data_manager.py": {
    "path": "data/minute_data_manager.py",
    "name": "minute_data_manager",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "yfinance",
      "pandas",
      "numpy",
      "h5py",
      "logging",
      "os",
      "time",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "typing.Union",
      "pathlib.Path",
      "warnings",
      "yfinance_fetcher.YFinanceCryptoFetcher",
      "utils.config.DataConfig",
      "types.SimpleNamespace",
      "types.SimpleNamespace",
      "json"
    ],
    "classes": [
      "MinuteDataManager"
    ],
    "functions": [
      "create_minute_data_manager",
      "fetch_6_month_data_for_backtesting",
      "__init__",
      "_get_default_config",
      "fetch_6_month_minute_data",
      "_fetch_symbol_6_months",
      "_fetch_single_period",
      "_fetch_multiple_periods",
      "_fetch_date_range",
      "_clean_data",
      "_rate_limit",
      "_save_to_hdf5",
      "_load_from_cache",
      "get_data_info",
      "clear_cache",
      "_generate_data_quality_report",
      "_calculate_expected_data_points",
      "get_cache_summary"
    ],
    "docstring": "High-frequency minute-level data management system for 6-month backtesting.",
    "last_modified": 1752372955.907449,
    "lines_of_code": 588,
    "trading_relevance": 1.0
  },
  "data/multi_timeframe_fetcher.py": {
    "path": "data/multi_timeframe_fetcher.py",
    "name": "multi_timeframe_fetcher",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "yfinance",
      "pandas",
      "numpy",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "logging",
      "warnings",
      "utils.config.DataConfig"
    ],
    "classes": [
      "UltraMultiTimeframeFetcher"
    ],
    "functions": [
      "__init__",
      "_get_higher_timeframe",
      "_get_lower_timeframe",
      "_get_period_for_timeframe",
      "fetch_multi_timeframe_data",
      "_process_timeframe_data",
      "_add_timeframe_features",
      "_get_volatility_window",
      "_get_momentum_window",
      "_get_trend_window",
      "align_timeframes",
      "_add_cross_timeframe_features",
      "fetch_all_symbols_multi_timeframe",
      "_clean_combined_data"
    ],
    "docstring": "Ultra-optimized multi-timeframe data fetcher for maximum prediction accuracy.",
    "last_modified": 1752000856.9630344,
    "lines_of_code": 338,
    "trading_relevance": 1.0
  },
  "meta_optim/deployment_cycle.py": {
    "path": "meta_optim/deployment_cycle.py",
    "name": "deployment_cycle",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "json",
      "time",
      "signal",
      "argparse",
      "threading",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "typing.Optional",
      "warnings",
      "meta_optim.hyperband_runner.HyperbandRunner",
      "meta_optim.objective_fn.MetaObjectiveFunction",
      "meta_optim.retrain_worker.RetrainWorker",
      "traceback",
      "traceback",
      "shutil"
    ],
    "classes": [
      "MetaDeploymentCycle"
    ],
    "functions": [
      "main",
      "__init__",
      "_get_default_config",
      "run_continuous_cycle",
      "run_single_optimization",
      "_run_optimization_phase",
      "_detailed_evaluation",
      "_test_configuration_stability",
      "_make_deployment_decision",
      "_deploy_configuration",
      "_backup_current_model",
      "_get_current_model_performance",
      "_monitor_performance",
      "_find_active_trading_logs",
      "_analyze_recent_performance",
      "_should_trigger_retraining",
      "_emergency_retrain",
      "_log_optimization_results",
      "_generate_cycle_summary",
      "_generate_optimization_report",
      "_signal_handler",
      "_cleanup"
    ],
    "docstring": "24-Hour Meta-Optimization Deployment Cycle\n\nOrchestrates continuous strategy optimization and deployment:\n- Runs Hyperband parameter exploration\n- Evaluates optimized configurations  \n- Deploys best-performing models to production\n- Monitors performance and triggers retraining\n\nUsage: python3 deployment_cycle.py [--mode continuous|single]",
    "last_modified": 1752497474.8293245,
    "lines_of_code": 654,
    "trading_relevance": 1.0
  },
  "meta_optim/retrain_worker.py": {
    "path": "meta_optim/retrain_worker.py",
    "name": "retrain_worker",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "pandas",
      "numpy",
      "joblib",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "typing.Optional",
      "datetime.datetime",
      "datetime.timedelta",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.model_selection.train_test_split",
      "sklearn.model_selection.TimeSeriesSplit",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.precision_score",
      "sklearn.metrics.recall_score",
      "warnings",
      "traceback"
    ],
    "classes": [
      "RetrainWorker"
    ],
    "functions": [
      "main",
      "__init__",
      "_load_training_data",
      "_create_synthetic_data",
      "_prepare_training_data",
      "_calculate_atr",
      "train_and_evaluate",
      "_train_models",
      "_backtest_models"
    ],
    "docstring": "Automated Model Retraining and Evaluation Worker\n\nHandles model training, backtesting, and evaluation for the meta-optimization layer.\nDesigned to work with parameter configurations from Hyperband runner.\n\nUsage: from retrain_worker import RetrainWorker",
    "last_modified": 1752497136.4101405,
    "lines_of_code": 538,
    "trading_relevance": 1.0
  },
  "meta_optim/hyperband_runner.py": {
    "path": "meta_optim/hyperband_runner.py",
    "name": "hyperband_runner",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "sys",
      "json",
      "time",
      "numpy",
      "pandas",
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "typing.Optional",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "warnings",
      "meta_optim.objective_fn.MetaObjectiveFunction",
      "meta_optim.retrain_worker.RetrainWorker",
      "traceback"
    ],
    "classes": [
      "HyperbandRunner"
    ],
    "functions": [
      "main",
      "__init__",
      "_get_default_config",
      "run_hyperband_optimization",
      "_sample_configurations",
      "_successive_halving",
      "_evaluate_configurations",
      "_evaluate_single_config",
      "_update_best_configs",
      "_analyze_results",
      "_analyze_parameter_importance",
      "_save_results",
      "load_best_configuration",
      "get_optimization_summary"
    ],
    "docstring": "Hyperband Parameter Explorer for Random Forest Meta-Optimization\n\nImplements sophisticated parameter exploration using:\n- Hyperband algorithm (multi-armed bandit approach)\n- Random search with early stopping\n- Bayesian optimization (optional)\n- Progressive halving for efficient resource allocation\n\nUsage: python3 hyperband_runner.py",
    "last_modified": 1752497032.818857,
    "lines_of_code": 492,
    "trading_relevance": 1.0
  },
  "meta_optim/objective_fn.py": {
    "path": "meta_optim/objective_fn.py",
    "name": "objective_fn",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "datetime.datetime",
      "datetime.timedelta",
      "warnings"
    ],
    "classes": [
      "MetaObjectiveFunction"
    ],
    "functions": [
      "main",
      "__init__",
      "evaluate_strategy",
      "_calculate_sharpe_ratio",
      "_calculate_profit_factor",
      "_calculate_max_drawdown",
      "_calculate_alpha_persistence",
      "_calculate_trade_efficiency",
      "_calculate_volatility_penalty",
      "_calculate_risk_metrics",
      "_check_viability",
      "_calculate_composite_score",
      "compare_strategies",
      "get_metric_explanations"
    ],
    "docstring": "Multi-Metric Objective Function for Random Forest Meta-Optimization\n\nImplements sophisticated composite scoring that considers:\n- Sharpe ratio (risk-adjusted returns)\n- Profit factor (gross profits / gross losses)\n- Maximum drawdown (worst peak-to-trough decline)\n- Alpha persistence (rolling 4-week performance stability)\n- Trade efficiency metrics\n\nUsage: from objective_fn import MetaObjectiveFunction",
    "last_modified": 1752496944.4667313,
    "lines_of_code": 406,
    "trading_relevance": 1.0
  },
  "utils/visualization.py": {
    "path": "utils/visualization.py",
    "name": "visualization",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "seaborn",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "typing.Any",
      "logging",
      "datetime.datetime",
      "warnings",
      "plotly.graph_objects",
      "plotly.subplots.make_subplots",
      "plotly.express",
      "os"
    ],
    "classes": [
      "CryptoTradingVisualizer"
    ],
    "functions": [
      "create_full_report",
      "__init__",
      "plot_portfolio_performance",
      "plot_feature_importance",
      "plot_returns_analysis",
      "plot_correlation_matrix",
      "plot_trading_signals",
      "create_performance_dashboard",
      "create_interactive_portfolio_chart"
    ],
    "docstring": "Visualization utilities for crypto RF trading system.",
    "last_modified": 1751697480.037804,
    "lines_of_code": 482,
    "trading_relevance": 1.0
  },
  "utils/config.py": {
    "path": "utils/config.py",
    "name": "config",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "dataclasses.dataclass",
      "dataclasses.field",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "json",
      "dataclasses.fields"
    ],
    "classes": [
      "DataConfig",
      "FeatureConfig",
      "ModelConfig",
      "StrategyConfig",
      "BacktestConfig",
      "SystemConfig",
      "Config"
    ],
    "functions": [
      "get_default_config",
      "load_config",
      "save",
      "load",
      "update_from_env",
      "filter_config"
    ],
    "docstring": "Configuration management for the crypto RF trading system.",
    "last_modified": 1752000756.2758067,
    "lines_of_code": 337,
    "trading_relevance": 1.0
  },
  "utils/__init__.py": {
    "path": "utils/__init__.py",
    "name": "__init__",
    "type": "trading",
    "priority": "LOW",
    "dependencies": [],
    "imports": [
      "config.Config",
      "config.get_default_config",
      "config.load_config"
    ],
    "classes": [],
    "functions": [],
    "docstring": "Utilities module for crypto RF trading system.",
    "last_modified": 1751665012.1548946,
    "lines_of_code": 5,
    "trading_relevance": 0.0
  },
  "utils/checkpoint_manager.py": {
    "path": "utils/checkpoint_manager.py",
    "name": "checkpoint_manager",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "os",
      "shutil",
      "json",
      "pickle",
      "logging",
      "threading",
      "time",
      "datetime.datetime",
      "datetime.timedelta",
      "pathlib.Path",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "hashlib",
      "zipfile"
    ],
    "classes": [
      "CheckpointManager"
    ],
    "functions": [
      "get_checkpoint_manager",
      "start_auto_checkpoints",
      "stop_auto_checkpoints",
      "emergency_checkpoint",
      "__init__",
      "start_auto_checkpoint",
      "stop_auto_checkpoint",
      "_auto_checkpoint_loop",
      "_auto_backup_loop",
      "_has_changes",
      "_get_file_hash",
      "create_checkpoint",
      "create_full_backup",
      "restore_checkpoint",
      "restore_backup",
      "_cleanup_old_checkpoints",
      "_cleanup_old_backups",
      "list_checkpoints",
      "list_backups",
      "get_status"
    ],
    "docstring": "Automatic checkpoint and backup system for the crypto trading project.",
    "last_modified": 1752355723.4614282,
    "lines_of_code": 427,
    "trading_relevance": 1.0
  },
  "phase2b/hmm_regime_detection.py": {
    "path": "phase2b/hmm_regime_detection.py",
    "name": "hmm_regime_detection",
    "type": "trading",
    "priority": "HIGH",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "typing.Any",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "dataclasses.dataclass",
      "json",
      "pickle",
      "scipy.stats",
      "scipy.optimize.minimize",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.metrics.adjusted_rand_score",
      "glob",
      "os",
      "sklearn.cluster.KMeans",
      "traceback"
    ],
    "classes": [
      "HMMConfig",
      "HiddenMarkovModel",
      "HMMRegimeDetector"
    ],
    "functions": [
      "main",
      "__post_init__",
      "__init__",
      "_initialize_parameters",
      "_compute_emission_probabilities",
      "_forward_algorithm",
      "_backward_algorithm",
      "_compute_posteriors",
      "_update_parameters",
      "fit",
      "_viterbi_decode",
      "predict_states",
      "predict_probabilities",
      "__init__",
      "prepare_observations",
      "fit",
      "predict_regimes",
      "_analyze_regimes",
      "_calculate_regime_stability",
      "get_regime_summary",
      "save_model",
      "load_model"
    ],
    "docstring": "Phase 2B: Hidden Markov Models for Regime Detection\nULTRATHINK Implementation - Market Regime Classification\n\nImplements sophisticated regime detection used by institutional trading firms:\n- Multi-state HMM for market regime identification\n- Volatility clustering detection\n- Regime-dependent feature selection\n- Dynamic model adaptation based on market states\n- Real-time regime inference\n\nDesigned to enhance ensemble performance through regime-aware adaptation.",
    "last_modified": 1752523812.4455504,
    "lines_of_code": 745,
    "trading_relevance": 1.0
  },
  "phase2b/advanced_risk_management.py": {
    "path": "phase2b/advanced_risk_management.py",
    "name": "advanced_risk_management",
    "type": "trading",
    "priority": "CRITICAL",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "typing.Any",
      "typing.Callable",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "dataclasses.dataclass",
      "json",
      "pickle",
      "scipy.optimize.minimize",
      "scipy.optimize.differential_evolution",
      "scipy.stats",
      "sklearn.preprocessing.StandardScaler",
      "cvxpy",
      "glob",
      "os",
      "traceback"
    ],
    "classes": [
      "RiskConfig",
      "KellyCriterion",
      "CVaROptimizer",
      "DynamicPositionSizer",
      "AdvancedRiskManager"
    ],
    "functions": [
      "main",
      "__post_init__",
      "__init__",
      "calculate_kelly",
      "calculate_confidence_adjusted_kelly",
      "__init__",
      "calculate_cvar",
      "optimize_position_size_cvar",
      "__init__",
      "calculate_optimal_position_size",
      "_get_drawdown_adjustment",
      "_apply_risk_limits",
      "update_portfolio_state",
      "get_risk_metrics",
      "__init__",
      "calculate_position_size",
      "_analyze_position_risk",
      "_check_risk_alerts",
      "monitor_portfolio_risk",
      "generate_risk_report",
      "save_risk_manager",
      "load_risk_manager"
    ],
    "docstring": "Phase 2B: Advanced Risk Management with Kelly Criterion\nULTRATHINK Implementation - Optimal Position Sizing & Risk Control\n\nImplements sophisticated risk management used by institutional trading firms:\n- Fractional Kelly criterion for crypto (25-50% of full Kelly)\n- CVaR (Conditional Value at Risk) optimization\n- Dynamic position sizing based on confidence and volatility\n- Multi-objective risk optimization\n- Real-time drawdown monitoring and controls\n- Regime-dependent risk adjustment\n\nDesigned to optimize risk-adjusted returns while preventing catastrophic losses.",
    "last_modified": 1752523961.8239965,
    "lines_of_code": 880,
    "trading_relevance": 1.0
  },
  "phase2b/ensemble_meta_learning.py": {
    "path": "phase2b/ensemble_meta_learning.py",
    "name": "ensemble_meta_learning",
    "type": "trading",
    "priority": "CRITICAL",
    "dependencies": [],
    "imports": [
      "pandas",
      "numpy",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Union",
      "typing.Any",
      "warnings",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timedelta",
      "dataclasses.dataclass",
      "json",
      "pickle",
      "concurrent.futures.ProcessPoolExecutor",
      "multiprocessing",
      "sklearn.ensemble.RandomForestClassifier",
      "sklearn.ensemble.RandomForestRegressor",
      "sklearn.model_selection.cross_val_score",
      "sklearn.model_selection.StratifiedKFold",
      "sklearn.metrics.accuracy_score",
      "sklearn.metrics.precision_score",
      "sklearn.metrics.recall_score",
      "sklearn.metrics.f1_score",
      "sklearn.preprocessing.StandardScaler",
      "sklearn.preprocessing.LabelEncoder",
      "sklearn.neural_network.MLPClassifier",
      "xgboost",
      "lightgbm",
      "traceback",
      "sklearn.neural_network.MLPRegressor"
    ],
    "classes": [
      "EnsembleConfig",
      "BaseModelWrapper",
      "EnsembleMetaLearning"
    ],
    "functions": [
      "main",
      "__post_init__",
      "__init__",
      "_create_model",
      "fit",
      "predict",
      "predict_proba",
      "__init__",
      "initialize_base_models",
      "fit",
      "predict",
      "predict_proba",
      "_prepare_features",
      "_prepare_targets",
      "_train_base_models_cv",
      "_train_meta_learner",
      "_calculate_ensemble_weights",
      "_calculate_performance_weights",
      "_optimize_weights_genetic",
      "_train_regime_weights",
      "_generate_stacked_features",
      "_predict_with_blending",
      "_predict_proba_with_blending",
      "_predict_simple_average",
      "_validate_ensemble_performance",
      "_generate_training_summary",
      "save_ensemble",
      "load_ensemble",
      "evaluate_weights"
    ],
    "docstring": "Phase 2B: Ensemble Model Architecture with Meta-Learning\nULTRATHINK Implementation - Advanced Model Stacking\n\nImplements sophisticated ensemble techniques used by institutional trading firms:\n- Multi-model stacking (Random Forest + XGBoost + LightGBM + Neural Networks)\n- Meta-learning for dynamic model selection\n- Regime-dependent model weighting\n- Genetic algorithm optimization for blending\n- Dynamic ensemble adaptation based on market conditions\n\nDesigned to reduce PBO overfitting risk from 51.1% to <25% target.",
    "last_modified": 1752523675.0778904,
    "lines_of_code": 842,
    "trading_relevance": 1.0
  }
}